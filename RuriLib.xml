<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RuriLib</name>
    </assembly>
    <members>
        <member name="T:RuriLib.BlockLSCode">
            <summary>
            A block that contains LoliScript code for readonly visualization purposes.
            </summary>
        </member>
        <member name="P:RuriLib.BlockLSCode.Script">
            <summary>The LoliScript code to display.</summary>
        </member>
        <member name="M:RuriLib.BlockLSCode.#ctor">
            <summary>
            Creates a LSCode block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockLSCode.FromLS(System.Collections.Generic.List{System.String})">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockLSCode.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockReportCaptcha">
            <summary>
            A block that reports a captcha as incorrectly solved.
            </summary>
        </member>
        <member name="P:RuriLib.BlockReportCaptcha.Type">
            <summary>The type of captcha to report.</summary>
        </member>
        <member name="P:RuriLib.BlockReportCaptcha.CaptchaId">
            <summary>The ID of the captcha to report.</summary>
        </member>
        <member name="M:RuriLib.BlockReportCaptcha.#ctor">
            <summary>
            Creates a ReportCaptcha block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockReportCaptcha.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockReportCaptcha.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockReportCaptcha.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockSolveCaptcha">
            <summary>
            A block that solves a captcha challenge using a remote solving service.
            </summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Type">
            <summary>The type of captcha to solve.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.UseProxy">
            <summary>Whether to tell the service to use your proxy to solve captchas.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.UserAgent">
            <summary>The user agent that the service will use (should be the same as yours).</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Question">
            <summary>The captcha question to answer.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.LanguageGroup">
            <summary>The language group of the captcha text.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Language">
            <summary>The language group of the captcha text.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Base64">
            <summary>The captcha image as a base64 encoded string.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.IsPhrase">
            <summary>Whether the captcha has multiple words.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.CaseSensitive">
            <summary>Whether the captcha solution should be case sensitive.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.CharSet">
            <summary>The type of characters that can appear in the image.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.RequiresCalculation">
            <summary>Whether the captcha requires mathematical calculations.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.MinLength">
            <summary>The minimum length of the solution (0 is unspecified).</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.MaxLength">
            <summary>The maximum length of the solution (0 is unspecified).</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.TextInstructions">
            <summary>Any additional instructions useful to the solution.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.SiteKey">
            <summary>The site key.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.SiteUrl">
            <summary>The site URL.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.IsInvisible">
            <summary>Whether the ReCaptchaV2 is invisible.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Action">
            <summary>The ReCaptchaV3 action.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.MinScore">
            <summary>The ReCaptchaV3 minimum required score.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.PublicKey">
            <summary>The public key of the website.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.ServiceUrl">
            <summary>The service URL of the website.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.NoJS">
            <summary>Whether to solve the FunCaptcha with JS disabled.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.UserId">
            <summary>The user ID.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.SessionId">
            <summary>The session ID.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.WebServerSign1">
            <summary>The WebServerSign1.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.WebServerSign2">
            <summary>The WebServerSign2.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.GT">
            <summary>The gt static key.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.Challenge">
            <summary>The challenge dynamic key.</summary>
        </member>
        <member name="P:RuriLib.BlockSolveCaptcha.ApiServer">
            <summary>The api server domain.</summary>
        </member>
        <member name="M:RuriLib.BlockSolveCaptcha.#ctor">
            <summary>
            Creates a SolveCaptcha block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockSolveCaptcha.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockSolveCaptcha.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockSolveCaptcha.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.TCPCommand">
            <summary>
            Available commands for the TCP client.
            </summary>
        </member>
        <member name="F:RuriLib.TCPCommand.Connect">
            <summary>Connects the client to a host.</summary>
        </member>
        <member name="F:RuriLib.TCPCommand.Disconnect">
            <summary>Disconnects the client from the connected host.</summary>
        </member>
        <member name="F:RuriLib.TCPCommand.Send">
            <summary>Sends a message to the connected host.</summary>
        </member>
        <member name="T:RuriLib.BlockTCP">
            <summary>
            A block that can connect to a host over TCP and supports SSL.
            </summary>
        </member>
        <member name="P:RuriLib.BlockTCP.TCPCommand">
            <summary>The command for the TCP client.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.Host">
            <summary>The host to connect to.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.Port">
            <summary>The port to connect to.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.UseSSL">
            <summary>Whether the client will communicate over the Secure Sockets Layer.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.WebSocket">
            <summary>Whether to treat the message as a WebSocket payload (adds the frame overhead bytes).</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.WaitForHello">
            <summary>Whether to wait for the server hello message once connected.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.Message">
            <summary>The message sent to the host.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.VariableName">
            <summary>The name of the output variable where the TCP response will be stored.</summary>
        </member>
        <member name="P:RuriLib.BlockTCP.IsCapture">
            <summary>Whether the output variable should be marked for Capture.</summary>
        </member>
        <member name="M:RuriLib.BlockTCP.#ctor">
            <summary>
            Creates a TCP block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockTCP.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockTCP.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockTCP.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.Enums.CaptchaServiceType">
            <summary>The available captcha solving service providers.</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.TwoCaptcha">
            <summary>The service provided by 2captcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.AntiCaptcha">
            <summary>The service provided by anti-captcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.CustomTwoCaptcha">
            <summary>A service that implements the 2captcha API.</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.DeathByCaptcha">
            <summary>The service provided by deathbycaptcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.DeCaptcher">
            <summary>The service provided by de-captcher.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.ImageTyperz">
            <summary>The service provided by imagetyperz.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.CapMonster">
            <summary>The service provided by the CapMonster OCR application by ZennoLab.</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.AzCaptcha">
            <summary>The service provided by azcaptcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.CaptchasIO">
            <summary>The service provided by captchas.io</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.RuCaptcha">
            <summary>The service provided by rucaptcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.SolveCaptcha">
            <summary>The service provided by solvecaptcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.SolveRecaptcha">
            <summary>The service provided by solverecaptcha.com</summary>
        </member>
        <member name="F:RuriLib.Enums.CaptchaServiceType.TrueCaptcha">
            <summary>The service provided by apitruecaptcha.org</summary>
        </member>
        <member name="T:RuriLib.ListExtensions">
            <summary>
            Extension methods for lists.
            </summary>
        </member>
        <member name="M:RuriLib.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            Randomizes the elements in a list.
            </summary>
            <param name="list">The list to shuffle</param>
            <param name="rng">The random number generator</param>
        </member>
        <member name="T:RuriLib.StringExtensions">
            <summary>
            Extension methods for strings.
            </summary>
        </member>
        <member name="M:RuriLib.StringExtensions.Unescape(System.String,System.Boolean)">
            <summary>
            Replaces literal values of \n, \r\n and \t with the actual escape codes.
            </summary>
            <param name="str">The string to unescape</param>
            <param name="useEnvNewLine">Whether to unescape both \n and \r\n with the Environment.NewLine</param>
            <returns>The string with unescaped escape sequences.</returns>
        </member>
        <member name="M:RuriLib.StringExtensions.IsSubPathOf(System.String,System.String)">
            <summary>
            Returns true if <paramref name="path"/> starts with the path <paramref name="baseDirPath"/>.
            The comparison is case-insensitive, handles / and \ slashes as folder separators and
            only matches if the base dir folder name is matched exactly ("c:\foobar\file.txt" is not a sub path of "c:\foo").
            </summary>
        </member>
        <member name="M:RuriLib.StringExtensions.WithEnding(System.String,System.String)">
            <summary>
            Returns <paramref name="str"/> with the minimal concatenation of <paramref name="ending"/> (starting from end) that
            results in satisfying .EndsWith(ending).
            </summary>
            <example>"hel".WithEnding("llo") returns "hello", which is the result of "hel" + "lo".</example>
        </member>
        <member name="M:RuriLib.StringExtensions.Right(System.String,System.Int32)">
            <summary>Gets the rightmost <paramref name="length" /> characters from a string.</summary>
            <param name="value">The string to retrieve the substring from. Must not be null.</param>
            <param name="length">The number of characters to retrieve.</param>
            <returns>The substring.</returns>
        </member>
        <member name="T:RuriLib.SecurityProtocolExtensions">
            <summary>
            Extension methods for SecurityProtocol enum.
            </summary>
        </member>
        <member name="M:RuriLib.SecurityProtocolExtensions.ToSslProtocols(RuriLib.Functions.Requests.SecurityProtocol)">
            <summary>
            Converts the SecurityProtocol to an SslProtocols enum. Multiple protocols are not supported and SystemDefault is None.
            </summary>
            <param name="protocol">The SecurityProtocol</param>
            <returns>The converted SslProtocols.</returns>
        </member>
        <member name="T:RuriLib.FileLocker">
            <summary>
            Singleton class that manages application-wide file locking to avoid cross thread IO operations on the same file.
            </summary>
        </member>
        <member name="F:RuriLib.FileLocker.Hashtable">
            <summary>
            Maps file names to lockable objects.
            </summary>
        </member>
        <member name="M:RuriLib.FileLocker.GetLock(System.String)">
            <summary>
            Gets a lock by file name or creates one if it doesn't exist.
            </summary>
            <param name="fileName">The name of the file to access</param>
            <returns>An object that can be used in a lock statement.</returns>
        </member>
        <member name="T:RuriLib.Functions.Captchas.Captchas">
            <summary>Provides methods for interacting with captcha solving services.</summary>
        </member>
        <member name="M:RuriLib.Functions.Captchas.Captchas.GetService(RuriLib.ViewModels.SettingsCaptchas)">
            <summary>Gets a <see cref="T:CaptchaSharp.CaptchaService"/> to be used for solving captcha challenges.</summary>
        </member>
        <member name="T:RuriLib.Functions.Conversions.Encoding">
            <summary>
            The available conversion formats.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.HEX">
            <summary>A hexadecimal representation of a byte array.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.BIN">
            <summary>A binary representation of a byte array, containing a multiple of 8 binary digits.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.BASE64">
            <summary>A base64 representation of a byte array.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.ASCII">
            <summary>An ASCII string representation of a byte array.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.UTF8">
            <summary>A UTF8 string representation of a byte array.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conversions.Encoding.UNICODE">
            <summary>A UTF16 Unicode string representation of a byte array.</summary>
        </member>
        <member name="T:RuriLib.Functions.Conversions.Conversion">
            <summary>
            Provides methods to convert between different representations of binary data.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Conversions.Conversion.ConvertFrom(System.String,RuriLib.Functions.Conversions.Encoding)">
            <summary>
            Converts an encoded input to a byte array.
            </summary>
            <param name="input">The encoded input</param>
            <param name="encoding">The encoding</param>
            <returns>The converted byte array</returns>
        </member>
        <member name="M:RuriLib.Functions.Conversions.Conversion.ConvertTo(System.Byte[],RuriLib.Functions.Conversions.Encoding)">
            <summary>
            Converts a byte array to an encoded string.
            </summary>
            <param name="input">The byte array to encode</param>
            <param name="encoding">The encoding</param>
            <returns>The encoded string</returns>
        </member>
        <member name="T:RuriLib.Functions.Crypto.Hash">
            <summary>
            The available hashing functions.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.MD4">
            <summary>The MD4 hashing function (128 bits digest).</summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.MD5">
            <summary>The MD5 hashing function (128 bits digest).</summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.SHA1">
            <summary>The SHA-1 hashing function (160 bits digest).</summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.SHA256">
            <summary>The SHA-256 hashing function (256 bits digest).</summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.SHA384">
            <summary>The SHA-384 hashing function (384 bits digest).</summary>
        </member>
        <member name="F:RuriLib.Functions.Crypto.Hash.SHA512">
            <summary>The SHA-512 hashing function (512 bits digest).</summary>
        </member>
        <member name="T:RuriLib.Functions.Crypto.Crypto">
            <summary>
            Provides methods for encrypting, decrypting and generating signatures.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.MD4(System.Byte[])">
            <summary>
            Hashes a byte array through MD4.
            </summary>
            <param name="input">The byte array for which to calculate the hsh</param>
            <returns>The MD4 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.MD5(System.Byte[])">
            <summary>
            Hashes a byte array through MD5.
            </summary>
            <param name="input">The byte array for which to calculate the hsh</param>
            <returns>The MD5 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.HMACMD5(System.Byte[],System.Byte[])">
            <summary>
            Calculates an MD5 hash signature.
            </summary>
            <param name="input">The message for which a signature will be generated</param>
            <param name="key">The secret key to use to sign the message</param>
            <returns>The HMAC signature.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.SHA1(System.Byte[])">
            <summary>
            Hashes a byte array through SHA-1.
            </summary>
            <param name="input">The byte array for which to calculate the hash</param>
            <returns>The SHA-1 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.HMACSHA1(System.Byte[],System.Byte[])">
            <summary>
            Calculates a SHA-1 hash signature.
            </summary>
            <param name="input">The message for which a signature will be generated</param>
            <param name="key">The secret key to use to sign the message</param>
            <returns>The HMAC signature.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.SHA256(System.Byte[])">
            <summary>
            Hashes a byte array through SHA-256.
            </summary>
            <param name="input">The byte array for which to calculate the hash</param>
            <returns>The SHA-256 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.HMACSHA256(System.Byte[],System.Byte[])">
            <summary>
            Calculates a SHA-256 hash signature.
            </summary>
            <param name="input">The message for which a signature will be generated</param>
            <param name="key">The secret key to use to sign the message</param>
            <returns>The HMAC signature.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.SHA384(System.Byte[])">
            <summary>
            Hashes a byte array through SHA-384.
            </summary>
            <param name="input">The byte array for which to calculate the hash</param>
            <returns>The SHA-384 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.HMACSHA384(System.Byte[],System.Byte[])">
            <summary>
            Calculates a SHA-384 hash signature.
            </summary>
            <param name="input">The message for which a signature will be generated</param>
            <param name="key">The secret key to use to sign the message</param>
            <returns>The HMAC signature.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.SHA512(System.Byte[])">
            <summary>
            Hashes a byte array through SHA-512.
            </summary>
            <param name="input">The byte array for which to calculate the hash</param>
            <returns>The SHA-512 digest.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.HMACSHA512(System.Byte[],System.Byte[])">
            <summary>
            Calculates a SHA-512 hash signature.
            </summary>
            <param name="input">The message for which a signature will be generated</param>
            <param name="key">The secret key to use to sign the message</param>
            <returns>The HMAC signature.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.ToHex(System.Byte[])">
            <summary>
            Converts a byte array to a hexadecimal string.
            </summary>
            <param name="bytes">The byte array to convert</param>
            <returns>An uppercase hexadecimal string.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.FromHex(System.String)">
            <summary>
            Converts a hex string to a byte array.
            </summary>
            <param name="input">The hex string</param>
            <returns>A byte array</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.ToHashAlgorithmName(RuriLib.Functions.Crypto.Hash)">
            <summary>
            Converts from the Hash enum to the HashAlgorithmName default struct.
            </summary>
            <param name="type">The hash type as a Hash enum</param>
            <returns>The HashAlgorithmName equivalent.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.RSAEncrypt(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Encrypts a string using RSA.
            </summary>
            <param name="data">The data to encrypt as a base64 string</param>
            <param name="n">The public key's modulus as a base64 string</param>
            <param name="e">The public key's exponent as a base64 string</param>
            <param name="oaep">Whether to use OAEP-SHA1 padding mode instead of PKCS1</param>
            <returns>The encrypted data encoded as base64.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.RSADecrypt(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Decrypts a string using RSA.
            </summary>
            <param name="data">The data to decrypt as a base64 string</param>
            <param name="n">The public key's modulus as a base64 string</param>
            <param name="d">The private key's exponent as a base64 string</param>
            <param name="oaep">Whether to use OAEP-SHA1 padding mode instead of PKCS v1.5</param>
            <returns>The decrypted data encoded as base64.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.RSAPkcs1Pad2(System.String,System.String,System.String)">
            <summary>
            Encrypts a message using RSA with PKCS1PAD2 padding.
            </summary>
            <param name="message">The message as a UTF-8 string</param>
            <param name="modulus">The public key's modulus as a HEX string</param>
            <param name="exponent">The public key's exponent as a HEX string</param>
            <returns>The encrypted message.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.PBKDF2PKCS5(System.String,System.String,System.Int32,System.Int32,System.Int32,RuriLib.Functions.Crypto.Hash)">
            <summary>
            Generates a PKCS v5 #2.0 key using a Password-Based Key Derivation Function.
            </summary>
            <param name="password">The password to hash</param>
            <param name="salt">The salt to use encoded as base64. If empty, a random salt will be generated</param>
            <param name="saltSize">The random salt size that gets generated in case no salt is provided</param>
            <param name="iterations">The number of times the algorithm should be executed</param>
            <param name="type">The hashing algorithm to use</param>
            <param name="keyLength">The generated key length in bytes</param>
            <returns>The generated key as a base64 string.</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.AESEncrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Encrypts a string with AES.
            </summary>
            <param name="data">The AES-encrypted data</param>
            <param name="key">The decryption key as base64</param>
            <param name="iv">The initial value as base64</param>
            <param name="mode">The cipher mode</param>
            <param name="padding">The padding mode</param>
            <returns>The AES-encrypted string encoded as base64</returns>
        </member>
        <member name="M:RuriLib.Functions.Crypto.Crypto.AESDecrypt(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            Decrypts an AES-encrypted string.
            </summary>
            <param name="data">The AES-encrypted data encoded as base64</param>
            <param name="key">The decryption key as base64</param>
            <param name="iv">The initial value as base64</param>
            <param name="mode">The cipher mode</param>
            <param name="padding">The padding mode</param>
            <returns>The plaintext string</returns>
        </member>
        <member name="T:RuriLib.Functions.Download.Download">
            <summary>
            Provides methods to download files from the internet.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Download.Download.RemoteFile(System.String,System.String,System.Boolean,RuriLib.Models.CProxy,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String}@,System.Int32,System.String)">
            <summary>
            Downloads a remote file.
            </summary>
            <param name="fileName">The destination file on disk</param>
            <param name="url">The URL of the remote file</param>
            <param name="useProxies">Whether to use proxies for the request</param>
            <param name="proxy">The proxy, if needed</param>
            <param name="cookies">The cookies to use in the request</param>
            <param name="newCookies">The new cookie dictionary containing the new cookies too</param>
            <param name="timeout">The request timeout in milliseconds</param>
            <param name="userAgent">The user agent to use</param>
        </member>
        <member name="T:RuriLib.Functions.Formats.Encode">
            <summary>
            Provides methods for encoding data in various formats.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Formats.Encode.ToBase64(System.String)">
            <summary>
            Encodes a string to base64.
            </summary>
            <param name="plainText">The string to encode</param>
            <returns>The base64-encoded string</returns>
        </member>
        <member name="M:RuriLib.Functions.Formats.Encode.FromBase64(System.String)">
            <summary>
            Decodes a base64-encoded string.
            </summary>
            <param name="base64EncodedData">The base64-encoded string</param>
            <returns>The decoded string</returns>
        </member>
        <member name="T:RuriLib.Functions.Files.Files">
            <summary>
            Provides methods to work with files.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.SaveScreenshot(OpenQA.Selenium.Screenshot,RuriLib.BotData)">
            <summary>
            Saves a Selenium screenshot to a file with automatically generated name.
            </summary>
            <param name="screenshot">The Selenium screenshot</param>
            <param name="data">The BotData used for path creation</param>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.SaveScreenshot(System.Drawing.Bitmap,RuriLib.BotData)">
            <summary>
            Saves a screenshot to a file with automatically generated name.
            </summary>
            <param name="screenshot">The bitmap image</param>
            <param name="data">The BotData used for path creation</param>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.SaveScreenshot(System.IO.MemoryStream,RuriLib.BotData)">
            <summary>
            Saves a stream to a file with automatically generated name.
            </summary>
            <param name="stream">The input stream</param>
            <param name="data">The BotData used for path creation</param>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.MakeScreenshotPath(RuriLib.BotData)">
            <summary>
            Builds the path for the screenshot file.
            </summary>
            <param name="data">The BotData for path creation</param>
            <returns>The path of the file to save the screenshot to</returns>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.GetFirstAvailableFileName(System.String,System.String,System.String)">
            <summary>
            Gets the first available name in the given folder by incrementing a number at the end of the filename.
            </summary>
            <param name="basePath">The path to the folder</param>
            <param name="fileName">The name of the file without numbers at the end</param>
            <param name="extension">The extension of the file</param>
            <returns>The first available filename (including extension)</returns>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.MakeValidFileName(System.String,System.Boolean)">
            <summary>
            Fixes the filename to be compatible with the filesystem indicization.
            </summary>
            <param name="name">The name of the file</param>
            <param name="underscore">Whether to replace the unallowed characters with an underscore instead of removing them</param>
            <returns>The valid filename ready to be saved to disk</returns>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.ThrowIfNotInCWD(System.String)">
            <summary>
            Throws an UnauthorizedAccessException if the path is not part of the current working directory.
            </summary>
            <param name="path">The absolute or relative path.</param>
        </member>
        <member name="M:RuriLib.Functions.Files.Files.CreatePath(System.String)">
            <summary>
            Creates the folder structure that contains a certain files if it doesn't already exist.
            </summary>
            <param name="file">The absolute or relative path to the file.</param>
        </member>
        <member name="T:RuriLib.Functions.Requests.SecurityProtocol">
            <summary>
            Enumerates the supported security protocols.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.SecurityProtocol.SystemDefault">
            <summary>Let the operative system decide and block the unsecure protocols.</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.SecurityProtocol.SSL3">
            <summary>The SSL3 protocol (obsolete).</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.SecurityProtocol.TLS10">
            <summary>The TLS 1.0 protocol (obsolete).</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.SecurityProtocol.TLS11">
            <summary>The TLS 1.1 protocol.</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.SecurityProtocol.TLS12">
            <summary>The TLS 1.2 protocol.</summary>
        </member>
        <member name="T:RuriLib.Functions.Requests.Request">
            <summary>
            Provides methods to easily perform Extreme.NET requests.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.Finalize">
            <summary>
            Disposes of the HttpRequest and HttpContent when destroyed.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.Setup(RuriLib.ViewModels.RLSettingsViewModel,RuriLib.Functions.Requests.SecurityProtocol,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets up the request options.
            </summary>
            <param name="settings">The RuriLib settings</param>
            <param name="securityProtocol">The security protocol to use</param>
            <param name="autoRedirect">Whether to perform automatic redirection</param>
            <param name="acceptEncoding"></param>
            <param name="maxRedirects"></param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetStandardContent(System.String,System.String,Extreme.Net.HttpMethod,System.Boolean,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Sets a standard content for the request.
            </summary>
            <param name="postData">The content string</param>
            <param name="contentType">The content type</param>
            <param name="method">The HTTP method</param>
            <param name="encodeContent">Whether to URLencode the content automatically</param>
            <param name="log">The log (if any)</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetRawContent(System.String,System.String,Extreme.Net.HttpMethod,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Sets a raw content for the request.
            </summary>
            <param name="rawData">The raw HEX data</param>
            <param name="contentType">The content type</param>
            <param name="method">The HTTP method</param>
            <param name="log">The log (if any)</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetBasicAuth(System.String,System.String)">
            <summary>
            Sets the authorization header for basic authorization.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetMultipartContent(System.Collections.Generic.IEnumerable{RuriLib.Functions.Requests.MultipartContent},System.String,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Sets a multipart content collection for the request.
            </summary>
            <param name="contents">A collection of multipart contents</param>
            <param name="boundary">A boundary (if empty, one will be generated automatically)</param>
            <param name="log">The log (if any)</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetProxy(RuriLib.Models.CProxy)">
            <summary>
            Sets a proxy to be used during the request.
            </summary>
            <param name="proxy">The proxy</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetCookies(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Sets the cookies to be sent in the request.
            </summary>
            <param name="cookies">The cookie dictionary</param>
            <param name="log">The log (if any)</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SetHeaders(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Sets the headers to be sent in the request.
            </summary>
            <param name="headers">The headers dictionary</param>
            <param name="acceptEncoding">Whether to set the Accept-Encoding header automatically</param>
            <param name="log">The log (if any)</param>
            <returns>The request itself</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.Perform(System.String,Extreme.Net.HttpMethod,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Performs a request.
            </summary>
            <param name="url">The URL</param>
            <param name="method">The HTTP method</param>
            <param name="log">The log (if any)</param>
            <returns>A 4-tuple containing Address, Response code, Headers and Cookies.</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SaveString(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Saves the response to a string.
            </summary>
            <param name="readResponseSource"></param>
            <param name="headers">The headers, to add the Content-Length header (if needed)</param>
            <param name="log">The log (if any)</param>
            <returns>The response source as a string</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.GetResponseStream">
            <summary>
            Reads the response to a MemoryStream.
            </summary>
            <returns>The MemoryStream</returns>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.SaveFile(System.String,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Saves the response content to a file.
            </summary>
            <param name="path">The file path on disk</param>
            <param name="log">The log (if any)</param>
        </member>
        <member name="M:RuriLib.Functions.Requests.Request.GenerateMultipartBoundary">
            <summary>
            Generates a random string to be used for boundary.
            </summary>
            <returns>The random 16-character string</returns>
        </member>
        <member name="T:RuriLib.Functions.Requests.MultipartContent">
            <summary>
            Represents a Multipart Content
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.MultipartContent.Type">
            <summary>The type of multipart content.</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.MultipartContent.Name">
            <summary>The name of the multipart content.</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.MultipartContent.Value">
            <summary>The value of the multipart content (a string value or a file path).</summary>
        </member>
        <member name="F:RuriLib.Functions.Requests.MultipartContent.ContentType">
            <summary>The Content-Type of the file content.</summary>
        </member>
        <member name="T:RuriLib.Functions.Time.Time">
            <summary>
            Provides methods to work with dates and times.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Time.Time.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Converts a DateTime to unix time seconds.
            </summary>
            <param name="dateTime">The DateTime to convert</param>
            <returns>The seconds that passed since Jan 1st 1970.</returns>
        </member>
        <member name="M:RuriLib.Functions.Time.Time.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Converts a DateTime to unix time milliseconds.
            </summary>
            <param name="dateTime">The DateTime to convert</param>
            <returns>The milliseconds that passed since Jan 1st 1970.</returns>
        </member>
        <member name="M:RuriLib.Functions.Time.Time.ToDateTime(System.String,System.String)">
            <summary>
            Converts a time string to a DateTime.
            </summary>
            <param name="time">The string to convert</param>
            <param name="format">The string's format</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:RuriLib.Functions.Time.Time.ToDateTime(System.Double)">
            <summary>
            Converts a unix time to a DateTime.
            </summary>
            <param name="unixTime">The unix time in seconds or milliseconds</param>
            <returns>A DateTime.</returns>
        </member>
        <member name="M:RuriLib.Functions.Time.Time.ToISO8601(System.DateTime)">
            <summary>
            Converts a DateTime to an ISO8601 time string.
            </summary>
            <param name="dateTime">A DateTime</param>
            <returns>An ISO8601 time string.</returns>
        </member>
        <member name="T:RuriLib.Functions.UserAgent.UserAgent">
            <summary>
            Provides methods to generate User Agents.
            </summary>
        </member>
        <member name="T:RuriLib.Functions.UserAgent.UserAgent.Browser">
            <summary>
            Enumerates browsers for which a User Agent can be generated.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.UserAgent.UserAgent.Browser.Chrome">
            <summary>The Google Chrome browser.</summary>
        </member>
        <member name="F:RuriLib.Functions.UserAgent.UserAgent.Browser.Firefox">
            <summary>The Mozilla Firefox browser.</summary>
        </member>
        <member name="F:RuriLib.Functions.UserAgent.UserAgent.Browser.InternetExplorer">
            <summary>The Internet Explorer browser.</summary>
        </member>
        <member name="F:RuriLib.Functions.UserAgent.UserAgent.Browser.Opera">
            <summary>The Opera browser.</summary>
        </member>
        <member name="F:RuriLib.Functions.UserAgent.UserAgent.Browser.OperaMini">
            <summary>The Opera Mini mobile browser.</summary>
        </member>
        <member name="M:RuriLib.Functions.UserAgent.UserAgent.ForBrowser(RuriLib.Functions.UserAgent.UserAgent.Browser)">
            <summary>
            Generates a User Agent for a specific Browser.
            </summary>
            <param name="browser">The Browser</param>
            <returns>A User Agent for the given browser</returns>
        </member>
        <member name="M:RuriLib.Functions.UserAgent.UserAgent.Random(System.Random)">
            <summary>
            Gets a random User-Agent header.
            </summary>
            <param name="rand">A random number generator</param>
            <returns>A randomly generated User-Agent header</returns>
        </member>
        <member name="T:RuriLib.Functions.Conditions.Comparer">
            <summary>
            The condition on which to base the outcome of a comparison.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.LessThan">
            <summary>A is less than B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.GreaterThan">
            <summary>A is greater than B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.EqualTo">
            <summary>A is equal to B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.NotEqualTo">
            <summary>A is not equal to B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.Contains">
            <summary>A contains B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.DoesNotContain">
            <summary>A does not contain B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.Exists">
            <summary>Whether any variable can be replaced inside the string.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.DoesNotExist">
            <summary>Whether no variable can be replaced inside the string.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.MatchesRegex">
            <summary>A matches regex pattern B.</summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.Comparer.DoesNotMatchRegex">
            <summary>A does not match regex pattern B.</summary>
        </member>
        <member name="T:RuriLib.Functions.Conditions.Condition">
            <summary>
            Static Class used to check if a condition is true or false.
            </summary>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.ReplaceAndVerify(System.String,RuriLib.Functions.Conditions.Comparer,System.String,RuriLib.BotData)">
            <summary>
            Replaces the values and verifies if a condition is true or false.
            </summary>
            <param name="left">The left term</param>
            <param name="comparer">The comparison operator</param>
            <param name="right">The right term</param>
            <param name="data">The BotData used for variable replacement</param>
            <returns>Whether the comparison is verified or not.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.ReplaceAndVerify(RuriLib.Functions.Conditions.KeycheckCondition,RuriLib.BotData)">
            <summary>
            Replaces the values and verifies if a condition is true or false.
            </summary>
            <param name="kcCond">The keycheck condition struct</param>
            <param name="data">The BotData used for variable replacement</param>
            <returns>Whether the comparison is verified or not.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.Verify(RuriLib.Functions.Conditions.KeycheckCondition)">
            <summary>
            Verifies if a condition is true or false (without replacing the values).
            </summary>
            <param name="kcCond">The keycheck condition struct</param>
            <returns>Whether the comparison is verified or not.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.ReplaceAndVerifyAll(RuriLib.Functions.Conditions.KeycheckCondition[],RuriLib.BotData)">
            <summary>
            Verifies if all the provided conditions are true (after replacing).
            </summary>
            <param name="conditions">The keycheck conditions</param>
            <param name="data">The BotData used for variable replacement</param>
            <returns>True if all the conditions are verified.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.VerifyAll(RuriLib.Functions.Conditions.KeycheckCondition[])">
            <summary>
            Verifies if all the provided conditions are true (without replacing).
            </summary>
            <param name="conditions">The keycheck conditions</param>
            <returns>True if all the conditions are verified.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.ReplaceAndVerifyAny(RuriLib.Functions.Conditions.KeycheckCondition[],RuriLib.BotData)">
            <summary>
            Verifies if at least one of the provided conditions is true (after replacing).
            </summary>
            <param name="conditions">The keycheck conditions</param>
            <param name="data">The BotData used for variable replacement</param>
            <returns>True if any condition is verified.</returns>
        </member>
        <member name="M:RuriLib.Functions.Conditions.Condition.VerifyAny(RuriLib.Functions.Conditions.KeycheckCondition[])">
            <summary>
            Verifies if at least one of the provided conditions is true (without replacing).
            </summary>
            <param name="conditions">The keycheck conditions</param>
            <returns>True if any condition is verified.</returns>
        </member>
        <member name="T:RuriLib.Functions.Conditions.KeycheckCondition">
            <summary>
            Represents a condition of a keycheck.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.KeycheckCondition.Left">
            <summary>
            The left term.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.KeycheckCondition.Comparer">
            <summary>
            The comparison operator.
            </summary>
        </member>
        <member name="F:RuriLib.Functions.Conditions.KeycheckCondition.Right">
            <summary>
            The right term.
            </summary>
        </member>
        <member name="T:RuriLib.GZip">
            <summary>
            GZip utilities class.
            </summary>
        </member>
        <member name="M:RuriLib.GZip.Zip(System.String)">
            <summary>
            Zips a string.
            </summary>
            <param name="str">The string to zip</param>
            <returns>The zipped byte array.</returns>
        </member>
        <member name="M:RuriLib.GZip.Unzip(System.Byte[])">
            <summary>
            Unzips a byte array.
            </summary>
            <param name="bytes">The byte array to unzip</param>
            <returns>The unzipped string.</returns>
        </member>
        <member name="T:RuriLib.Interfaces.IAlerter">
            <summary>
            Interface for requesting user interaction (e.g. confirmations).
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IAlerter.YesOrNo(System.String,System.String)">
            <summary>
            Asks a yes or no question to the user.
            </summary>
            <param name="message">The body of the alert</param>
            <param name="title">The caption of the alert</param>
            <returns>True if the user answered yes.</returns>
        </member>
        <member name="T:RuriLib.Interfaces.IApplication">
            <summary>
            Interface for an application that depends on RuriLib.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.RunnerManager">
            <summary>
            The Runner Manager.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.ProxyManager">
            <summary>
            The Proxy Manager.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.ProxyChecker">
            <summary>
            The Proxy Checker.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.WordlistManager">
            <summary>
            The Wordlist Manager.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.ConfigManager">
            <summary>
            The Config Manager.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.HitsDB">
            <summary>
            The Hits Database.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.Alerter">
            <summary>
            The user interaction provider.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.Logger">
            <summary>
            The logging system.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IApplication.Settings">
            <summary>
            The global settings.
            </summary>
        </member>
        <member name="T:RuriLib.Interfaces.IConfigManager">
            <summary>
            Interface for a class that manages a collection of configs.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IConfigManager.Add(RuriLib.ViewModels.ConfigViewModel)">
            <summary>
            Adds a new config.
            </summary>
            <param name="config">The config to add</param>
        </member>
        <member name="M:RuriLib.Interfaces.IConfigManager.Rescan">
            <summary>
            Rescans local folders for an updated list of configs.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IConfigManager.Configs">
            <summary>
            The collection of available configs.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IConfigManager.Remove(RuriLib.ViewModels.ConfigViewModel)">
            <summary>
            Removes a config.
            </summary>
            <param name="config">The config to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IConfigManager.Remove(System.Collections.Generic.IEnumerable{RuriLib.ViewModels.ConfigViewModel})">
            <summary>
            Removes multiple configs.
            </summary>
            <param name="configs">The configs to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IConfigManager.Update(RuriLib.ViewModels.ConfigViewModel)">
            <summary>
            Updates a config.
            </summary>
            <param name="config">The config to update</param>
        </member>
        <member name="T:RuriLib.Interfaces.ISettings">
            <summary>
            An interface for global settings.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.ISettings.Environment">
            <summary>
            The current Environment settings.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.ISettings.RLSettings">
            <summary>
            The current RuriLib settings.
            </summary>
        </member>
        <member name="T:RuriLib.Interfaces.IHitsDB">
            <summary>
            An interface for a database of hits.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.DeleteDuplicates">
            <summary>
            Deletes duplicate hits.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.RemoveAll">
            <summary>
            Removes all hits from the database.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IHitsDB.Hits">
            <summary>
            The collection of hits.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.Remove(RuriLib.Models.Hit)">
            <summary>
            Removes a hit from the database.
            </summary>
            <param name="hit">The hit to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.Remove(System.Collections.Generic.IEnumerable{RuriLib.Models.Hit})">
            <summary>
            Removes multiple hits from the database.
            </summary>
            <param name="hits">The hits to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.Update(RuriLib.Models.Hit)">
            <summary>
            Updates a hit in the database.
            </summary>
            <param name="hit">The hit to update</param>
        </member>
        <member name="M:RuriLib.Interfaces.IHitsDB.Add(RuriLib.Models.Hit)">
            <summary>
            Adds a new hit to the database.
            </summary>
            <param name="hit">The hit to add</param>
        </member>
        <member name="T:RuriLib.Interfaces.ILogger">
            <summary>
            Interface for a logging system.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.ILogger.Log(System.String,RuriLib.LogLevel,System.Boolean,System.Int32)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">The message body</param>
            <param name="level">The message level of criticality</param>
            <param name="prompt">Whether to prompt the entry to the user in an immediately visible way</param>
            <param name="timeout">The amount of seconds after which the prompt will close (0 = never close)</param>
        </member>
        <member name="P:RuriLib.Interfaces.ILogger.Entries">
            <summary>
            All entries in the logging system.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.ILogger.Enabled">
            <summary>
            Whether logging is enabled.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.ILogger.BufferSize">
            <summary>
            The maximum amount of entries that can be stored (0 = unlimited).
            </summary>
        </member>
        <member name="T:RuriLib.Interfaces.IProxyChecker">
            <summary>
            Provides methods to check if proxies are working.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyChecker.TestSite">
            <summary>
            The site proxies are tested against.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyChecker.SuccessKey">
            <summary>
            The success key that can be found in the source of the test site when a proxy works correctly.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyChecker.OnlyUntested">
            <summary>
            Whether to only check untested proxies.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyChecker.Timeout">
            <summary>
            The maximum proxy timeout in seconds.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyChecker.BotsAmount">
            <summary>
            The amount of parallel threads to use for the check.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyChecker.CheckAllAsync(System.Collections.Generic.IEnumerable{RuriLib.Models.CProxy},System.Threading.CancellationToken,System.Action{RuriLib.Models.CheckResult{RuriLib.Models.ProxyResult}},System.IProgress{System.Single})">
            <summary>
            Checks all the proxies asynchronously and reports progress and check result.
            </summary>
            <param name="proxies">The proxies to check</param>
            <param name="cancellationToken">The token that allows to cancel the execution</param>
            <param name="onResult">The action to execute when a single check is finished</param>
            <param name="progress">The delegate that gets called when the progress changes</param>
            <returns>An awaitable task.</returns>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyChecker.CheckAsync(RuriLib.Models.CProxy,System.Threading.CancellationToken)">
            <summary>
            Checks a proxy asynchronously.
            </summary>
            <param name="proxy">The proxy to check</param>
            <param name="cancellationToken">The token that allows to cancel the execution</param>
            <returns>The awaitable result of the check.</returns>
        </member>
        <member name="T:RuriLib.Interfaces.IProxyManager">
            <summary>
            Interface for a class that manages a collection of proxies.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.Add(RuriLib.Models.CProxy)">
            <summary>
            Adds a proxy to the collection.
            </summary>
            <param name="proxy">The proxy to add</param>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.AddRange(System.Collections.Generic.IEnumerable{RuriLib.Models.CProxy})">
            <summary>
            Adds multiple proxies to the collection.
            </summary>
            <param name="proxies">The collection of proxies to add</param>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyManager.Proxies">
            <summary>
            The collection of proxies.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.Remove(RuriLib.Models.CProxy)">
            <summary>
            Removes a proxy from the collection.
            </summary>
            <param name="proxy">The proxy to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.Remove(System.Collections.Generic.IEnumerable{RuriLib.Models.CProxy})">
            <summary>
            Removes multiple proxies from the collection.
            </summary>
            <param name="proxies">The proxies to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.Update(RuriLib.Models.CProxy)">
            <summary>
            Updates a proxy in the collection.
            </summary>
            <param name="proxy">The proxy to update</param>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.RemoveAll">
            <summary>
            Removes all proxies from the collection.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.RemoveNotWorking">
            <summary>
            Removes not working proxies from the collection.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.RemoveDuplicates">
            <summary>
            Removes duplicate proxies from the collection.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IProxyManager.RemoveUntested">
            <summary>
            Removes all untested proxies from the collection.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IProxyManager.Stats">
            <summary>
            Retrieves the proxy manager's statistics.
            </summary>
        </member>
        <member name="T:RuriLib.Interfaces.IRepository`2">
            <summary>
            Generic interface repository for performing CRUD operations on a persistent storage.
            </summary>
            <typeparam name="TEntity">The returned entity type</typeparam>
            <typeparam name="TId">The type of id</typeparam>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Get">
            <summary>
            Retrieves all entities from the storage.
            </summary>
            <returns>All the stored entities</returns>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Get(`1)">
            <summary>
            Retrieves an entity basing on its id.
            </summary>
            <param name="id">The unique entity id</param>
            <returns>The found entity.</returns>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Add(`0)">
            <summary>
            Adds an entity to the storage.
            </summary>
            <param name="entity">The entity that needs to be added</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple entities to the storage.
            </summary>
            <param name="entities">The entities that need to be added</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Remove(`0)">
            <summary>
            Removes an entity from the storage.
            </summary>
            <param name="entity">The entity to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple entities from the storage.
            </summary>
            <param name="entities">The entities that need to be removed</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.RemoveAll">
            <summary>
            Clears the storage.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Update(`0)">
            <summary>
            Updates an entity in the storage.
            </summary>
            <param name="entity">The entity that needs to be updated</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates multiple entities in the storage.
            </summary>
            <param name="entities">The entities that need to be updated</param>
        </member>
        <member name="T:RuriLib.Interfaces.IRunner">
            <summary>
            Interface for a generic Runner.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRunner.Start">
            <summary>
            Starts the Runner.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRunner.Stop">
            <summary>
            Stops the Runner.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Busy">
            <summary>
            Whether the Runner is already busy.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Progress">
            <summary>
            The checking progress percentage (0 to 100).
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Checked">
            <summary>
            The collection of data that was checked with a positive outcome.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Stats">
            <summary>
            Progress and statistics.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Config">
            <summary>
            The currently selected Config.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRunner.SetConfig(RuriLib.Config,System.Boolean)">
            <summary>
            Sets a Config in the IRunner.
            </summary>
            <param name="config">The Config to set</param>
            <param name="setRecommended">Whether to automatically change the BotsAmount to the suggested value</param>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.Wordlist">
            <summary>
            The currently selected Wordlist.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRunner.SetWordlist(RuriLib.Models.Wordlist)">
            <summary>
            Sets a Wordlist in the IRunner.
            </summary>
            <param name="wordlist">The Wordlist to set</param>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.BotsAmount">
            <summary>
            The amount of concurrent Bots.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.ProxyMode">
            <summary>
            Whether to use proxies during the checking process.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunner.StartingPoint">
            <summary>
            The starting point of the Wordlist.
            </summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.MessageArrived">
            <summary>Fired when a new message needs to be logged.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.WorkerStatusChanged">
            <summary>Fired when the Master Worker status changed.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.FoundHit">
            <summary>Fired when a Hit was found.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.ReloadProxies">
            <summary>Fired when proxies need to be reloaded.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.DispatchAction">
            <summary>/// Fired when an Action could change the UI and needs to be dispatched to another thread (usually it's handled by the UI thread).</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.SaveProgress">
            <summary>Fired when the progress record needs to be saved to the Database.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.AskCustomInputs">
            <summary>Fired when custom inputs from the user are required.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.ConfigChanged">
            <summary>Fired when the currently selected Config changed.</summary>
        </member>
        <member name="E:RuriLib.Interfaces.IRunner.WordlistChanged">
            <summary>Fired when the currently selected Wordlist changed.</summary>
        </member>
        <member name="T:RuriLib.Interfaces.IRunnerManager">
            <summary>
            Interface for a class that manages multiple runners.
            </summary>
        </member>
        <member name="P:RuriLib.Interfaces.IRunnerManager.Runners">
            <summary>
            The list of managed runners.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IRunnerManager.Create">
            <summary>
            Creates a new runner and adds it to the manager.
            </summary>
            <returns>The newly created runner</returns>
        </member>
        <member name="M:RuriLib.Interfaces.IRunnerManager.Remove(RuriLib.Interfaces.IRunner)">
            <summary>
            Removes a runner from the manager.
            </summary>
            <param name="runner">The runner to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IRunnerManager.RemoveAll">
            <summary>
            Clears the list of runners.
            </summary>
        </member>
        <member name="T:RuriLib.Interfaces.IWordlistManager">
            <summary>
            Interface for a class that manages a collection of wordlists.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IWordlistManager.Add(RuriLib.Models.Wordlist)">
            <summary>
            Adds a wordlist to the collection.
            </summary>
            <param name="wordlist">The wordlist to add</param>
        </member>
        <member name="P:RuriLib.Interfaces.IWordlistManager.Wordlists">
            <summary>
            The collection of available wordlists.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IWordlistManager.Update(RuriLib.Models.Wordlist)">
            <summary>
            Updates a wordlist.
            </summary>
            <param name="wordlist">The updated wordlist</param>
        </member>
        <member name="M:RuriLib.Interfaces.IWordlistManager.Remove(RuriLib.Models.Wordlist)">
            <summary>
            Removes a given wordlist from the collection.
            </summary>
            <param name="wordlist">The wordlist to remove</param>
        </member>
        <member name="M:RuriLib.Interfaces.IWordlistManager.DeleteNotFound">
            <summary>
            Deletes wordlists that reference a missing file from the collection.
            </summary>
        </member>
        <member name="M:RuriLib.Interfaces.IWordlistManager.RemoveAll">
            <summary>
            Removes all wordlists from the collection.
            </summary>
        </member>
        <member name="T:RuriLib.LS.BlockProcessingException">
            <summary>
            An exception thrown inside a block's Process method.
            </summary>
        </member>
        <member name="M:RuriLib.LS.BlockProcessingException.#ctor">
            <summary>
            Creates the exception without a message.
            </summary>
        </member>
        <member name="M:RuriLib.LS.BlockProcessingException.#ctor(System.String)">
            <summary>
            Creates the exception with a message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:RuriLib.LS.BlockProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the exception with a message and an inner exception.
            </summary>
            <param name="message">The message</param>
            <param name="inner">The inner exception</param>
        </member>
        <member name="T:RuriLib.LS.ScriptingLanguage">
            <summary>
            The supported scripting languages.
            </summary>
        </member>
        <member name="F:RuriLib.LS.ScriptingLanguage.JavaScript">
            <summary>The JavaScript language.</summary>
        </member>
        <member name="F:RuriLib.LS.ScriptingLanguage.IronPython">
            <summary>The Python language that interacts with the .NET framework.</summary>
        </member>
        <member name="T:RuriLib.LS.LoliScript">
            <summary>
            Represents a LoliScript script that can be run line by line.
            </summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.Script">
            <summary>The actual script as a string containing linebreaks.</summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.CompressedLines">
            <summary>The list of all lines of the script, where expanded blocks have been compressed into one-liners.</summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.CurrentLine">
            <summary>The current line being processed.</summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.NextBlock">
            <summary>The next block to be processed. Empty if the script has no more blocks to execute.</summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.CurrentBlock">
            <summary>The current block being processed.</summary>
        </member>
        <member name="P:RuriLib.LS.LoliScript.CanProceed">
            <summary>Whether the script can proceed the execution or not.</summary>
        </member>
        <member name="M:RuriLib.LS.LoliScript.#ctor">
            <summary>
            Constructs a LoliScript object with an empty script.
            </summary>
        </member>
        <member name="M:RuriLib.LS.LoliScript.#ctor(System.String)">
            <summary>
            Constructs a LoliScript object with a given script.
            </summary>
            <param name="script">The LoliScript script</param>
        </member>
        <member name="M:RuriLib.LS.LoliScript.ToBlocks">
            <summary>
            Transforms the script into a list of blocks. The blocks that cannot be converted will be created as BlockLSCode blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.LoliScript.FromBlocks(System.Collections.Generic.List{RuriLib.BlockBase})">
            <summary>
            Sets the script from a list of blocks.
            </summary>
            <param name="blocks">The list of blocks which inherit from the BlockBase type</param>
        </member>
        <member name="M:RuriLib.LS.LoliScript.Reset">
            <summary>
            Resets the line counter so the script can be run again.
            </summary>
        </member>
        <member name="M:RuriLib.LS.LoliScript.TakeStep(RuriLib.BotData)">
            <summary>
            Executes a line of the script.
            </summary>
            <param name="data">The BotData needed for variable replacement</param>
        </member>
        <member name="M:RuriLib.LS.LoliScript.IsEmptyOrCommentOrDisabled(System.String)">
            <summary>
            Tests if a line is empty, a comment (starting with ##) or if it's disabled (starting with !).
            </summary>
            <param name="line">The line to test.</param>
            <returns>Whether the line needs to be skipped</returns>
        </member>
        <member name="M:RuriLib.LS.LoliScript.ScanFor(System.String[],System.Int32,System.Boolean,System.String[])">
            <summary>
            Scans for a given set of identifiers in the script and returns the line index value of the first found.
            </summary>
            <param name="lines">The lines of the script</param>
            <param name="current">The index of the current line</param>
            <param name="downwards">Whether to scan downwards or upwards</param>
            <param name="options">The target identifiers</param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.LoliScript.ParseCheckCondition(System.String@,RuriLib.BotData)">
            <summary>
            Parses a condition made of left-hand term, condition type and right-hand term and verifies if it's true.
            </summary>
            <param name="cfLine">The reference to the line to parse</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.LoliScript.RunScript(System.String,RuriLib.LS.ScriptingLanguage,System.String,RuriLib.BotData)">
            <summary>
            Runs a script with a different language inside the LoliScript.
            </summary>
            <param name="script">The script as a string with linebreaks</param>
            <param name="language">The language of the script</param>
            <param name="outputs">The variables that should be extracted from the script's scope and set into the BotData local variables</param>
            <param name="data">The BotData needed for variable replacement</param>
        </member>
        <member name="T:RuriLib.LS.BlockParser">
            <summary>
            Parses a block from LoliScript code.
            </summary>
        </member>
        <member name="P:RuriLib.LS.BlockParser.BlockMappings">
            <summary>
            The allowed block identifiers.
            </summary>
        </member>
        <member name="M:RuriLib.LS.BlockParser.IsBlock(System.String)">
            <summary>
            Tests if a line is parsable as a block.
            </summary>
            <param name="line">The data line to test</param>
            <returns>Whether the line contains a block or not.</returns>
        </member>
        <member name="M:RuriLib.LS.BlockParser.GetBlockType(System.String)">
            <summary>
            Gets the block type from a block line.
            </summary>
            <param name="line">The block line</param>
            <returns>The type of the block</returns>
        </member>
        <member name="M:RuriLib.LS.BlockParser.Parse(System.String)">
            <summary>
            Parses a block line as a block object.
            </summary>
            <param name="line">The block line</param>
            <returns>The parsed block object</returns>
        </member>
        <member name="T:RuriLib.LS.CommandParser">
            <summary>
            Parse a command from LoliScript code.
            </summary>
        </member>
        <member name="T:RuriLib.LS.CommandParser.CommandName">
            <summary>
            The allowed command identifiers.
            </summary>
        </member>
        <member name="F:RuriLib.LS.CommandParser.CommandName.PRINT">
            <summary>Prints some data to the log after replacing variables in it.</summary>
        </member>
        <member name="F:RuriLib.LS.CommandParser.CommandName.SET">
            <summary>Sets the value of hidden variables.</summary>
        </member>
        <member name="F:RuriLib.LS.CommandParser.CommandName.DELETE">
            <summary>Deletes variables.</summary>
        </member>
        <member name="F:RuriLib.LS.CommandParser.CommandName.MOUSEACTION">
            <summary>Moves the mouse in a selenium-driven browser.</summary>
        </member>
        <member name="M:RuriLib.LS.CommandParser.IsCommand(System.String)">
            <summary>
            Tests if a line is parsable as a command.
            </summary>
            <param name="line">The data line to test</param>
            <returns>Whether the line contains a command or not</returns>
        </member>
        <member name="M:RuriLib.LS.CommandParser.Parse(System.String,RuriLib.BotData)">
            <summary>
            Gets a command Action from a command line.
            </summary>
            <param name="line">The command line</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The Action that needs to be executed</returns>
        </member>
        <member name="T:RuriLib.LS.MouseActionParser">
            <summary>
            Parses a MOUSEACTION command.
            </summary>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.Parse(System.String,RuriLib.BotData)">
            <summary>
            Gets the Action that needs to be executed.
            </summary>
            <param name="line">The data line to parse</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The Action to execute</returns>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.DrawRedDot(OpenQA.Selenium.Remote.RemoteWebDriver,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a red dot at the specified coordinates.
            </summary>
            <param name="driver">The selenium driver</param>
            <param name="x">The x coordinate of the dot</param>
            <param name="y">The y coordinate of the dot</param>
            <param name="thickness">The thickness in pixels of the dot</param>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.ShrinkArray(System.Drawing.Point[],System.Int32)">
            <summary>
            Shrinks an array of points by removing random elements to fit a target size.
            </summary>
            <param name="originArray">The original array of points</param>
            <param name="targetSize">The target size of the array being returned</param>
            <returns>An array of points with the target size</returns>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.GetOffsets(System.Drawing.Point[])">
            <summary>
            Given an array of points, gets the offsets between one point and the next.
            </summary>
            <param name="originArray">The original array of points</param>
            <returns>The array of offsets</returns>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.RedDotScript(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Builds the js needed to draw a red dot on the screen with the specified options.
            </summary>
            <param name="x">The x coordinate of the dot</param>
            <param name="y">The y coordinate of the dot</param>
            <param name="thickness">The thickness of the dot</param>
            <param name="id">The id of the created div element</param>
            <returns>The script to execute inside the the browser</returns>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.SpawnDiv(OpenQA.Selenium.Remote.RemoteWebDriver,System.Int32,System.Int32,System.String)">
            <summary>
            Spawns a 1x1 div element at the specified coordinates.
            </summary>
            /// <param name="driver">The selenium driver</param>
            <param name="x">The x coordinate of the div</param>
            <param name="y">The y coordinate of the div</param>
            /// <param name="id">The id of the div element</param>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.DrawRedDots(OpenQA.Selenium.Remote.RemoteWebDriver,System.Drawing.Point[],System.Int32)">
            <summary>
            Draws an array of red dots on the screen.
            </summary>
            <param name="driver">The selenium driver</param>
            <param name="points">The array of points to draw</param>
            <param name="thickness">The thickness of the points</param>
        </member>
        <member name="M:RuriLib.LS.MouseActionParser.ParseElement(System.String@,RuriLib.BotData)">
            <summary>
            Parses an html element from LoliScript code.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The parsed IWebElement</returns>
        </member>
        <member name="T:RuriLib.LS.Line">
            <summary>
            <para>Represents a line drawn between two points.</para>
            <para>This class provides useful methods to simulate mouse movement across the screen.</para>
            </summary>
        </member>
        <member name="M:RuriLib.LS.Line.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates a line between two points.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
        </member>
        <member name="M:RuriLib.LS.Line.getPoints(System.Int32)">
            <summary>
            Gets a given number of equally distant points in the line.
            </summary>
            <param name="quantity">The amount of points to generate</param>
            <returns>The array of the generated points</returns>
        </member>
        <member name="M:RuriLib.LS.Line.getOffsets(System.Int32)">
            <summary>
            Gets a given number of offsets from equally distant points in the line.
            </summary>
            <param name="quantity">The amount of offsets to generate</param>
            <returns>The array of the generated offsets</returns>
        </member>
        <member name="M:RuriLib.LS.Line.Distance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            The carthesian distance between two points.
            </summary>
            <param name="x1">The x coordinate of the first point</param>
            <param name="y1">The y coordinate of the first point</param>
            <param name="x2">The x coordinate of the second point</param>
            <param name="y2">The y coordinate of the second point</param>
            <returns>The distance between the points</returns>
        </member>
        <member name="M:RuriLib.LS.Line.Hypot(System.Double,System.Double)">
            <summary>
            Gets the hypotenuse of a triangle given its legs.
            </summary>
            <param name="x">The first leg of the triangle</param>
            <param name="y">The second leg of the triangle</param>
            <returns>The value of the hypotenuse</returns>
        </member>
        <member name="M:RuriLib.LS.Line.HumanWindMouse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the points drawn by a mouse when a human moves it across the screen.
            </summary>
            <param name="xs">The x coordinate of the starting point</param>
            <param name="ys">The y coordinate of the starting point</param>
            <param name="xe">The x coordinate of the ending point</param>
            <param name="ye">The y coordinate of the ending point</param>
            <param name="gravity">The gravity the movement is subject to</param>
            <param name="wind">The non linearity of the movement</param>
            <param name="targetArea">The target area to reach</param>
            <returns>The set of points to draw in order to emulate a humanlike movement of the mouse</returns>
        </member>
        <member name="T:RuriLib.LS.BlockWriter">
            <summary>
            Provides useful functions for writing a block as a piece of LoliScript code.
            </summary>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.#ctor(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Creates a new BlockWriter for the given block type and with the given settings.
            </summary>
            <param name="blockType">The Type of the block to write</param>
            <param name="indented">Whether the code can be indented on multiple lines for readability</param>
            <param name="disabled">Whether the block to write is disabled</param>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Token(System.Object,System.String)">
            <summary>
            Writes any type of variable as a token (by calling its default ToString method) and a space.
            </summary>
            <param name="token">The variable to write</param>
            <param name="property">The name of the property of the block. If the value is the default one, it will not be written. Do not set this parameter to always write the variable.</param>
            <returns>The BlockWriter itself</returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Integer(System.Int32,System.String)">
            <summary>
            Writes an integer value and a space.
            </summary>
            <param name="integer">The integer value to write</param>
            <param name="property">The name of the property of the block. If the value is the default one, it will not be written. Do not set this parameter to always write the variable.</param>
            <returns>The BlockWriter itself</returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Literal(System.String,System.String)">
            <summary>
            Writes a literal value (with escaped double-quotes) wrapped by double-quotes and a space.
            </summary>
            <param name="literal">The literal value to write</param>
            <param name="property">The name of the property of the block. If the value is the default one, it will not be written. Do not set this parameter to always write the variable.</param>
            <returns>The BlockWriter itself</returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Arrow">
            <summary>
            Writes an Arrow (->) and a space.
            </summary>
            <returns>The BlockWriter itself</returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Label(System.String)">
            <summary>
            Writes a block label as a # sign, the label name and a space.
            </summary>
            <param name="label">The label of the block</param>
            <returns>The BlockWriter itself</returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Boolean(System.Boolean,System.String)">
            <summary>
            Writes a boolean with the syntax Name=Value and a space.
            </summary>
            <param name="boolean">The boolean value to write</param>
            <param name="property">The name of the property</param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Indent(System.Int32)">
            <summary>
            Writes a linebreak and a given number of spaces on the next line.
            </summary>
            <param name="spacing">The amount of spacing to perform. A spacing of value 1 means two blank space characters, 2 means 4 etc.</param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.Return">
            <summary>
            Writes a linebreak.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RuriLib.LS.BlockWriter.CheckDefault(System.Object,System.String)">
            <summary>
            Checks if a property has the default value.
            </summary>
            <param name="value">The value that needs to be checked</param>
            <param name="property">The name of the property that contains that value</param>
            <returns>Whether the property has the default value or not</returns>
        </member>
        <member name="T:RuriLib.LS.TokenType">
            <summary>
            The allowed types of tokens that can be parsed from a line.
            </summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Label">
            <summary>A block label.</summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Parameter">
            <summary>A generic parameter, usually an enum value.</summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Literal">
            <summary>A string between double quotes.</summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Arrow">
            <summary>The character sequence -&gt;.</summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Boolean">
            <summary>A boolean value in the format Name=Value where Name is the name of the property.</summary>
        </member>
        <member name="F:RuriLib.LS.TokenType.Integer">
            <summary>An integer value.</summary>
        </member>
        <member name="T:RuriLib.LS.LineParser">
            <summary>
            Contains methods used to parse tokens from a LoliScript line of code.
            </summary>
        </member>
        <member name="M:RuriLib.LS.LineParser.ParseToken(System.String@,RuriLib.LS.TokenType,System.Boolean,System.Boolean)">
            <summary>
            Parses a token of a given type from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="type">The type of token to parse</param>
            <param name="essential">Whether an exception should be thrown if the token cannot be parsed</param>
            <param name="proceed">Whether to remove the token from the original line after parsing it</param>
            <returns>The parsed token or, if parse fails but the token is not essential, an empty string</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.SetBool(System.String@,System.Object)">
            <summary>
            Sets a boolean property by parsing its name and value from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="instance">The instance of the object containing the boolean property</param>
        </member>
        <member name="M:RuriLib.LS.LineParser.ParseEnum(System.String@,System.String,System.Type)">
            <summary>
            Parses an enum value from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="label">Debug information about the expected enum</param>
            <param name="enumType">The type of the enum</param>
            <returns>An enum of the provided enumType</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.ParseLiteral(System.String@,System.String,System.Boolean,RuriLib.BotData)">
            <summary>
            Parses a literal value from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="label">Debug information about the expected literal</param>
            <param name="replace">Whether to perform variable replacement in the literal</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The literal without the leading and trailing double quotes</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.ParseInt(System.String@,System.String)">
            <summary>
            Parses an integer value from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="label">Debug information about the expected integer</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.ParseLabel(System.String@)">
            <summary>
            Parses a block label from a line.
            </summary>
            <param name="input">The reference to the line of code</param>
            <returns>The label of the block, if defined</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.EnsureIdentifier(System.String@,System.String)">
            <summary>
            Makes sure that a specified identifier is present and moves past it. An exception will be thrown if the identifier is not present.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="id">The expected identifier</param>
        </member>
        <member name="M:RuriLib.LS.LineParser.Lookahead(System.String@)">
            <summary>
            Gets the type of the first token in the given line of code.
            </summary>
            <param name="input">The reference to the line of code</param>
            <returns>The type of the token</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.CheckIdentifier(System.String@,System.String)">
            <summary>
            Checks if the next token is a given identifier.
            </summary>
            <param name="input">The reference to the line of code</param>
            <param name="id">The identifier to check</param>
            <returns>Whether the token and the identifier are equal</returns>
        </member>
        <member name="M:RuriLib.LS.LineParser.GetPattern(RuriLib.LS.TokenType)">
            <summary>
            Gets the regex pattern to match a given token type.
            </summary>
            <param name="type">The token type</param>
            <returns>The regex pattern to parse the token type</returns>
        </member>
        <member name="T:RuriLib.LS.DeleteParser">
            <summary>
            Parses a DELETE command.
            </summary>
        </member>
        <member name="M:RuriLib.LS.DeleteParser.Parse(System.String,RuriLib.BotData)">
            <summary>
            Gets the Action that needs to be executed.
            </summary>
            <param name="line">The data line to parse</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The Action to execute</returns>
        </member>
        <member name="T:RuriLib.LS.SetParser">
            <summary>
            Parses a SET command.
            </summary>
        </member>
        <member name="M:RuriLib.LS.SetParser.Parse(System.String,RuriLib.BotData)">
            <summary>
            Gets the Action that needs to be executed.
            </summary>
            <param name="line">The data line to parse</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The Action to execute</returns>
        </member>
        <member name="T:RuriLib.Models.CheckResult`1">
            <summary>
            Wrapper for a check result.
            </summary>
            <typeparam name="T">The type of result</typeparam>
        </member>
        <member name="F:RuriLib.Models.CheckResult`1.success">
            <summary>
            Whether the check was completed successfully.
            </summary>
        </member>
        <member name="F:RuriLib.Models.CheckResult`1.result">
            <summary>
            The result of the check
            </summary>
        </member>
        <member name="F:RuriLib.Models.CheckResult`1.error">
            <summary>
            The error message, if any.
            </summary>
        </member>
        <member name="M:RuriLib.Models.CheckResult`1.#ctor(System.Boolean,`0,System.String)">
            <summary>
            Constructs a check result.
            </summary>
            <param name="success">Whether the check was completed successfully</param>
            <param name="result">The result of the check</param>
            <param name="error">The error message, if any</param>
        </member>
        <member name="T:RuriLib.Models.DataPool">
            <summary>
            The pool where data lines are taken from.
            </summary>
        </member>
        <member name="P:RuriLib.Models.DataPool.List">
            <summary>The IEnumerable of all available data lines.</summary>
        </member>
        <member name="P:RuriLib.Models.DataPool.Size">
            <summary>The total number of lines.</summary>
        </member>
        <member name="M:RuriLib.Models.DataPool.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a DataPool given an IEnumerable and counts the amount of lines.
            </summary>
            <param name="list">The IEnumerable to pick lines from</param>
        </member>
        <member name="M:RuriLib.Models.DataPool.#ctor(System.String)">
            <summary>
            Creates a DataPool by loading lines from a file.
            </summary>
            <param name="fileName">The name of the file to load data lines from</param>
        </member>
        <member name="M:RuriLib.Models.DataPool.#ctor(System.String,System.Int32)">
            <summary>
            Creates a DataPool by generating all the possible combinations of a string.
            </summary>
            <param name="charSet">The allowed character set (one after the other like in the string "abcdef")</param>
            <param name="length">The length of the output combinations</param>
        </member>
        <member name="T:RuriLib.Models.Persistable`1">
            <summary>
            Objects that can be saved on a persistent storage can inherit from this class.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Persistable`1.Id">
            <summary>
            The unique id.
            </summary>
        </member>
        <member name="T:RuriLib.Models.ProxyResult">
            <summary>
            The result of a proxy check.
            </summary>
        </member>
        <member name="F:RuriLib.Models.ProxyResult.proxy">
            <summary>
            The proxy that was tested.
            </summary>
        </member>
        <member name="F:RuriLib.Models.ProxyResult.working">
            <summary>
            Whether the proxy works.
            </summary>
        </member>
        <member name="F:RuriLib.Models.ProxyResult.ping">
            <summary>
            The ping in milliseconds.
            </summary>
        </member>
        <member name="F:RuriLib.Models.ProxyResult.country">
            <summary>
            The approximate location of the proxy server (if it was tested).
            </summary>
        </member>
        <member name="M:RuriLib.Models.ProxyResult.#ctor(RuriLib.Models.CProxy,System.Boolean,System.Int32,System.String)">
            <summary>
            Initializes a proxy check result.
            </summary>
            <param name="proxy">The proxy that was tested</param>
            <param name="working">Whether the proxy works</param>
            <param name="ping">The ping in milliseconds</param>
            <param name="country">The approximate location of the proxy server (if it was tested)</param>
        </member>
        <member name="T:RuriLib.Models.RunnerSessionData">
            <summary>
            Contains the essential information of a Runner Session.
            </summary>
        </member>
        <member name="P:RuriLib.Models.RunnerSessionData.Config">
            <summary>The name of the selected Config.</summary>
        </member>
        <member name="P:RuriLib.Models.RunnerSessionData.Wordlist">
            <summary>The name of the selected Wordlist.</summary>
        </member>
        <member name="P:RuriLib.Models.RunnerSessionData.Bots">
            <summary>The amount of bots selected.</summary>
        </member>
        <member name="P:RuriLib.Models.RunnerSessionData.ProxyMode">
            <summary>The proxy mode selected.</summary>
        </member>
        <member name="T:RuriLib.Models.Stats.ProxyManagerStats">
            <summary>
            A container for all statistics of an IProxyManager.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Total">
            <summary>
            The total amount of proxies in the pool.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Tested">
            <summary>
            The amount of tested proxies.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Working">
            <summary>
            The amount of working proxies.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Http">
            <summary>
            The amount of HTTP proxies in the pool.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Socks4">
            <summary>
            The amount of SOCKS4 proxies in the pool.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Socks4a">
            <summary>
            The amount of SOCKS4A proxies in the pool.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Stats.ProxyManagerStats.Socks5">
            <summary>
            The amount of SOCKS5 proxies in the pool.
            </summary>
        </member>
        <member name="M:RuriLib.Models.Stats.ProxyManagerStats.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports data-related statistics.
            </summary>
            <param name="total">The total amount of proxies in the pool</param>
            <param name="tested">The amount of tested proxies</param>
            <param name="working">The amount of working proxies</param>
            <param name="http">The amount of HTTP proxies in the pool</param>
            <param name="socks4">The amount of SOCKS4 proxies in the pool</param>
            <param name="socks4a">The amount of SOCKS4A proxies in the pool</param>
            <param name="socks5">The amount of SOCKS5 proxies in the pool</param>
        </member>
        <member name="T:RuriLib.Models.Stats.RunnerStats">
            <summary>
            A container for all statistics of an IRunner progress.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStats.data">
            <summary>
            The data-related stats.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStats.proxies">
            <summary>
            The proxy-related stats.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStats.cpm">
            <summary>
            The amount of checks per minute.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStats.credit">
            <summary>
            The remaining captcha credit.
            </summary>
        </member>
        <member name="M:RuriLib.Models.Stats.RunnerStats.#ctor(RuriLib.Models.Stats.RunnerStatsData,RuriLib.Models.Stats.RunnerStatsProxies,System.Double,System.Decimal)">
            <summary>
            Reports Runner statistics.
            </summary>
            <param name="data">The data-related stats</param>
            <param name="proxies">The proxy-related stats</param>
            <param name="cpm">The amount of checks per minute</param>
            <param name="credit">The remaining captcha credit</param>
        </member>
        <member name="T:RuriLib.Models.Stats.RunnerStatsProxies">
            <summary>
            A container for all proxy-related statistics of an IRunner.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsProxies.total">
            <summary>
            The total amount of loaded proxies.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsProxies.alive">
            <summary>
            The amount of proxies that are alive.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsProxies.banned">
            <summary>
            The amount of banned proxies.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsProxies.bad">
            <summary>
            The amount of bad proxies.
            </summary>
        </member>
        <member name="M:RuriLib.Models.Stats.RunnerStatsProxies.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports proxy-related statistics.
            </summary>
            <param name="total">The total amount of checked proxies</param>
            <param name="alive">The amount of proxies that are alive</param>
            <param name="banned">The amount of banned proxies</param>
            <param name="bad">The amount of bad proxies</param>
        </member>
        <member name="T:RuriLib.Models.Stats.RunnerStatsData">
            <summary>
            A container for all data-related statistics of an IRunner.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.total">
            <summary>
            The total amount of checked data.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.hits">
            <summary>
            The amount of hits.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.custom">
            <summary>
            The amount of custom results.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.bad">
            <summary>
            The amount of bad results.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.retries">
            <summary>
            The amount of retries due to a RETRY or BAN status.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Stats.RunnerStatsData.toCheck">
            <summary>
            The amount of results that need to be furtherly checked.
            </summary>
        </member>
        <member name="M:RuriLib.Models.Stats.RunnerStatsData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reports data-related statistics.
            </summary>
            <param name="total">The total amount of checked data</param>
            <param name="hits">The amount of hits</param>
            <param name="custom">The amount of custom results</param>
            <param name="bad">The amount of bad results</param>
            <param name="retries">The amount of retries due to a RETRY or BAN status</param>
            <param name="toCheck">The amount of results that need to be furtherly checked</param>
        </member>
        <member name="T:RuriLib.Models.ProxyPool">
            <summary>
            Class that manages a pool of proxies.
            </summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Proxies">
            <summary>The full list of proxies in the pool.</summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Alive">
            <summary>The list of Alive proxies (AVAILABLE or BUSY).</summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Available">
            <summary>The list of Available proxies.</summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Banned">
            <summary>The list of Banned proxies.</summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Bad">
            <summary>The list of Bad proxies.</summary>
        </member>
        <member name="P:RuriLib.Models.ProxyPool.Locked">
            <summary>
            <para>Whether the proxy list is locked or not.</para>
            <para>It prevents multiple bots from choosing the same proxy simultaneously, regardless of the fact that concurrent usage may be disabled.</para>
            </summary>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.#ctor(System.Collections.Generic.IEnumerable{System.String},Extreme.Net.ProxyType,System.Boolean)">
            <summary>
            Initializes the proxy pool given a collection of string to be parsed as proxies and their type.
            </summary>
            <param name="proxies">The collection of strings to parse the proxies from</param>
            <param name="type">The type of the proxies</param>
            <param name="shuffle">Whether to shuffle the proxy list</param>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.#ctor(System.Collections.Generic.List{RuriLib.Models.CProxy},System.Boolean)">
            <summary>
            <para>Initializes the proxy pool given a collection of CProxy objects.</para>
            <para>The proxies will be first cloned and then stored in the list.</para>
            <para>They will also be unbanned to make sure there are no leftovers from previous checks.</para>
            </summary>
            <param name="proxies">The list of CProxy objects to be cloned and added to the list</param>
            <param name="shuffle">Whether to shuffle the proxy list</param>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.ClearCF">
            <summary>
            Clears the Clearance and Cfduid cookies set by Cloudflare.
            </summary>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.UnbanAll">
            <summary>
            Sets all the BANNED and BAD proxies status to AVAILABLE and resets their Uses. It also clears the Cloudflare cookies.
            </summary>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.GetProxy(System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Tries to return the first available proxy from the list.
            </summary>
            <param name="evenBusy">Whether to include proxies that are being used by other bots</param>
            <param name="maxUses">The maximum uses of a proxy, after which it will be banned (0 for infinite)</param>
            <param name="neverBan">Whether a proxy can ever be banned</param>
            <returns>The first available proxy respecting the conditions or null</returns>
        </member>
        <member name="M:RuriLib.Models.ProxyPool.RemoveDuplicates">
            <summary>
            Removes all duplicate proxies from the pool.
            </summary>
        </member>
        <member name="T:RuriLib.Models.RemoteProxySource">
            <summary>
            A remote source where proxies can be downloaded and parsed from.
            </summary>
        </member>
        <member name="M:RuriLib.Models.RemoteProxySource.#ctor(System.Int32)">
            <summary>
            Creates a RemoteProxySource given a unique ID.
            </summary>
            <param name="id">The unique ID</param>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Id">
            <summary>The unique ID of the RemoteProxySource.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Active">
            <summary>Whether the RemoteProxySource is active or not.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Url">
            <summary>The Url of the remote source.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Type">
            <summary>The type of downloaded proxies.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.TypeInitialized">
            <summary>
            Whether the proxy type has been initialized.
            </summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Pattern">
            <summary>The regex pattern to match when parsing proxies from the downloaded page. Must use capture groups.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySource.Output">
            <summary>The output format of the groups matched by Regex.</summary>
        </member>
        <member name="T:RuriLib.Models.RemoteProxySourceResult">
            <summary>
            The result for async download of proxies from remote sources.
            </summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySourceResult.Successful">
            <summary>Whether the download was successful.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySourceResult.Error">
            <summary>The Message of the Exception thrown while downloading or parsing the proxies.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySourceResult.Url">
            <summary>The Url from which the proxies were downloaded from.</summary>
        </member>
        <member name="P:RuriLib.Models.RemoteProxySourceResult.Proxies">
            <summary>The downloaded and parsed proxies.</summary>
        </member>
        <member name="T:RuriLib.Models.WebhookFormat">
            <summary>
            The class that gets JSON-encoded and gets sent to the Webhook URL when a hit is found (if enabled).
            </summary>
        </member>
        <member name="M:RuriLib.Models.WebhookFormat.#ctor(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Initializes the WebhookFormat object.
            </summary>
            <param name="data">The input data</param>
            <param name="type">The hit type</param>
            <param name="capturedData">The string-encoded captured data</param>
            <param name="timestamp">The unix timestamp</param>
            <param name="configName">The config name</param>
            <param name="configAuthor">The config author</param>
            <param name="user">The user that is calling the webhook</param>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.Data">
            <summary>The input data.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.Type">
            <summary>The hit type.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.CapturedData">
            <summary>The string-encoded captured data.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.Timestamp">
            <summary>The unix timestamp.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.ConfigName">
            <summary>The config name.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.ConfigAuthor">
            <summary>The config author.</summary>
        </member>
        <member name="P:RuriLib.Models.WebhookFormat.User">
            <summary>The user that is calling the webhook.</summary>
        </member>
        <member name="T:RuriLib.Models.CData">
            <summary>
            Represents a data line that needs to be checked.
            </summary>
        </member>
        <member name="P:RuriLib.Models.CData.Data">
            <summary>The actual content of the line.</summary>
        </member>
        <member name="P:RuriLib.Models.CData.Type">
            <summary>The WordlistType of the Wordlist the line belongs to.</summary>
        </member>
        <member name="P:RuriLib.Models.CData.Retries">
            <summary>The amount of times the data has been retried with a different proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CData.IsValid">
            <summary>Whether the data line respects the regex verification.</summary>
        </member>
        <member name="M:RuriLib.Models.CData.#ctor(System.String,RuriLib.Models.WordlistType)">
            <summary>
            Creates a CData object given a data line and the WordlistType.
            </summary>
            <param name="data">The data line</param>
            <param name="type">The WordlistType of the Wordlist the data line belongs to</param>
        </member>
        <member name="M:RuriLib.Models.CData.GetVariables(System.Boolean)">
            <summary>
            Gets all the variables that need to be set after slicing the data line.
            </summary>
            <param name="encode">Whether the returned variable values should be URLencoded</param>
            <returns>The variables that need to be set inside the Bot's VariableList</returns>
        </member>
        <member name="M:RuriLib.Models.CData.RespectsRules(System.Collections.Generic.List{RuriLib.Models.DataRule})">
            <summary>
            Checks if the data line respects all the data rules present in a Config.
            </summary>
            <param name="rules">The list of rules of the Config</param>
            <returns>Whether the data line respects the rules</returns>
        </member>
        <member name="M:RuriLib.Models.CData.CheckContains(System.String,System.String)">
            <summary>
            Checks if a data line contains certain characters.
            </summary>
            <param name="input">The data line</param>
            <param name="what">The characters to search. Defaults are Lowercase, Uppercase, Digit, Symbol. Custom character sets can be created by concatenating the characters in a single string (e.g. ABCDEF)</param>
            <returns></returns>
        </member>
        <member name="T:RuriLib.Models.ExportFormat">
            <summary>
            The export format for saving a Hit as a formatted string.
            </summary>
        </member>
        <member name="P:RuriLib.Models.ExportFormat.Format">
            <summary>The format of the desired string.</summary>
        </member>
        <member name="T:RuriLib.Models.Record">
            <summary>
            A record that, given a Config's name and a Wordlist's location, returns how many data lines have already been checked.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Record.ConfigName">
            <summary>The name of the Config.</summary>
        </member>
        <member name="P:RuriLib.Models.Record.WordlistLocation">
            <summary>The location on disk of the Wordlist.</summary>
        </member>
        <member name="P:RuriLib.Models.Record.Checkpoint">
            <summary>How many data lines were already checked.</summary>
        </member>
        <member name="M:RuriLib.Models.Record.#ctor">
            <summary>Needed for NoSQL deserialization.</summary>
        </member>
        <member name="M:RuriLib.Models.Record.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a Record to be stored in the Database.
            </summary>
            <param name="configName">The name of the Config used in the check</param>
            <param name="wordlistLocation">The location on disk of the Wordlist used in the check</param>
            <param name="checkpoint">The amount of data lines checked when creating the record</param>
        </member>
        <member name="T:RuriLib.Models.CVar">
            <summary>
            Represents a variable.
            </summary>
        </member>
        <member name="T:RuriLib.Models.CVar.VarType">
            <summary>
            The type of variable.
            </summary>
        </member>
        <member name="F:RuriLib.Models.CVar.VarType.Single">
            <summary>Holds a single string as value.</summary>
        </member>
        <member name="F:RuriLib.Models.CVar.VarType.List">
            <summary>Holds a list of strings as value.</summary>
        </member>
        <member name="F:RuriLib.Models.CVar.VarType.Dictionary">
            <summary>Holds a dictionary of strings as value.</summary>
        </member>
        <member name="P:RuriLib.Models.CVar.Name">
            <summary>The variable name.</summary>
        </member>
        <member name="P:RuriLib.Models.CVar.Value">
            <summary>The dynamic variable value.</summary>
        </member>
        <member name="P:RuriLib.Models.CVar.IsCapture">
            <summary>Whether the variable is used for the final capture.</summary>
        </member>
        <member name="P:RuriLib.Models.CVar.Type">
            <summary>The variable type (it determines which type of value is expected).</summary>
        </member>
        <member name="P:RuriLib.Models.CVar.Hidden">
            <summary>Whether the variable is hidden and shouldn't be displayed to the user.</summary>
        </member>
        <member name="M:RuriLib.Models.CVar.#ctor">
            <summary>Needed for NoSQL deserialization.</summary>
        </member>
        <member name="M:RuriLib.Models.CVar.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a variable of type Single.
            </summary>
            <param name="name">The variable name</param>
            <param name="value">The variable value as a single string</param>
            <param name="isCapture">Whether the variable is marked as Capture</param>
            <param name="hidden">Whether the variable is hidden</param>
        </member>
        <member name="M:RuriLib.Models.CVar.#ctor(System.String,System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates a variable of type List.
            </summary>
            <param name="name">The variable name</param>
            <param name="value">The variable value as a list of strings</param>
            <param name="isCapture">Whether the variable is marked as Capture</param>
            <param name="hidden">Whether the variable is hidden</param>
        </member>
        <member name="M:RuriLib.Models.CVar.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.Boolean)">
            <summary>
            Creates a variable of type Dictionary.
            </summary>
            <param name="name">The variable name</param>
            <param name="value">The variable value as a dictionary of strings</param>
            <param name="isCapture">Whether the variable is marked as Capture</param>
            <param name="hidden">Whether the variable is hidden</param>
        </member>
        <member name="M:RuriLib.Models.CVar.#ctor(System.String,RuriLib.Models.CVar.VarType,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates a variable of a given type.
            </summary>
            <param name="name">The variable name</param>
            <param name="type">The variable type</param>
            <param name="value">The dynamic variable value</param>
            <param name="isCapture">Whether the variable is marked as Capture</param>
            <param name="hidden">Whether the variable is hidden</param>
        </member>
        <member name="M:RuriLib.Models.CVar.ToString">
            <summary>
            Outputs a string from a variable.
            </summary>
            <returns>The formatted value of the value as a single string</returns>
        </member>
        <member name="M:RuriLib.Models.CVar.GetListItem(System.Int32)">
            <summary>
            Gets an item from a List variable.
            </summary>
            <param name="index">The index of the item</param>
            <returns>The item of the List variable's value</returns>
        </member>
        <member name="M:RuriLib.Models.CVar.GetDictValue(System.String)">
            <summary>
            Gets an item from a Dictionary Key.
            </summary>
            <param name="key">The key of the dictionary entry</param>
            <returns>The value of the Dictionary variable's entry</returns>
        </member>
        <member name="M:RuriLib.Models.CVar.GetDictKey(System.String)">
            <summary>
            Gets an item from a Dictionary Value.
            </summary>
            <param name="value">The value of the dictionary entry</param>
            <returns>The key of the Dictionary variable's entry</returns>
        </member>
        <member name="T:RuriLib.Models.Wordlist">
            <summary>
            Represents a file as a source of input data that needs to be tested against a Config by the Runner.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Name">
            <summary>The name of the Wordlist.</summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Path">
            <summary>The path where the file is stored on disk.</summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Type">
            <summary>The WordlistType as a string (since the WordlistTypes in the Environment file are editable).</summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Purpose">
            <summary>The purpose for which the Wordlist should be used.</summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Total">
            <summary>The total number of data lines of the file.</summary>
        </member>
        <member name="P:RuriLib.Models.Wordlist.Temporary">
            <summary>If true, the Wordlist does not reside on the disk.</summary>
        </member>
        <member name="M:RuriLib.Models.Wordlist.#ctor">
            <summary>Needed for NoSQL deserialization.</summary>
        </member>
        <member name="M:RuriLib.Models.Wordlist.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of a Wordlist.
            </summary>
            <param name="name">The name of the Wordlist</param>
            <param name="path">The path to the file on disk</param>
            <param name="type">The WordlistType as a string</param>
            <param name="purpose">The purpose of the Wordlist</param>
            <param name="countLines">Whether to enumerate the total number of data lines in the Wordlist</param>
            <param name="temporary">If true, the Wordlist does not reside on the disk</param>
        </member>
        <member name="T:RuriLib.Models.Status">
            <summary>
            The Status of a CProxy.
            </summary>
        </member>
        <member name="F:RuriLib.Models.Status.AVAILABLE">
            <summary>The proxy is not assigned to any bot.</summary>
        </member>
        <member name="F:RuriLib.Models.Status.BUSY">
            <summary>The proxy is assigned to at least 1 bot.</summary>
        </member>
        <member name="F:RuriLib.Models.Status.BAD">
            <summary>The proxy didn't accept the connection.</summary>
        </member>
        <member name="F:RuriLib.Models.Status.BANNED">
            <summary>The proxy was banned.</summary>
        </member>
        <member name="T:RuriLib.Models.ProxyWorking">
            <summary>
            The Working Status of a CProxy.
            </summary>
        </member>
        <member name="F:RuriLib.Models.ProxyWorking.YES">
            <summary>The proxy is working fine.</summary>
        </member>
        <member name="F:RuriLib.Models.ProxyWorking.NO">
            <summary>The proxy is down or not accepting connections.</summary>
        </member>
        <member name="F:RuriLib.Models.ProxyWorking.UNTESTED">
            <summary>The proxy was not tested.</summary>
        </member>
        <member name="T:RuriLib.Models.CProxy">
            <summary>
            A proxy that supports http(s) and socks4/4a/5 protocols, authorization and chaining.
            </summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Proxy">
            <summary>The unparsed proxy string.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Username">
            <summary>The username used for authentication (empty if none).</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Password">
            <summary>The password used for authentication (empty if none).</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Type">
            <summary>The type of proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Country">
            <summary>The country of the proxy's ip.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Ping">
            <summary>The response delay of the proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Next">
            <summary>The next proxy object in a Proxy Chain.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.LastUsed">
            <summary>When the proxy was last used.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.LastChecked">
            <summary>When the proxy was last checked.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Working">
            <summary>The Working Status of the proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.HasNext">
            <summary>Whether the proxy has a successor in the Proxy Chain.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Uses">
            <summary>The number of times the proxy was used for a check.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Hooked">
            <summary>The number of bots the proxy is hooked to.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Clearance">
            <summary>The clearance cookie from Cloudflare.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Cfduid">
            <summary>The cfduid cookie from Cloudflare.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Status">
            <summary>The status of the proxy.</summary>
        </member>
        <member name="M:RuriLib.Models.CProxy.#ctor">
            <summary>Needed for NoSQL deserialization.</summary>
        </member>
        <member name="M:RuriLib.Models.CProxy.#ctor(System.String,Extreme.Net.ProxyType)">
            <summary>
            Creates a proxy given a string and a proxy type.
            </summary>
            <param name="proxy">The unparsed proxy string</param>
            <param name="type">The proxy type</param>
        </member>
        <member name="M:RuriLib.Models.CProxy.Parse(System.String,Extreme.Net.ProxyType,System.String,System.String)">
            <summary>
            Parses a CProxy object from an advanced string. Supports Proxy Chains.
            </summary>
            <param name="proxy">The string to parse the proxy from</param>
            <param name="defaultType">The default type to use when not specified</param>
            <param name="defaultUsername">The default username to use when not specified</param>
            <param name="defaultPassword">The default password to use when not specified</param>
            <returns>The parsed CProxy object</returns>
        </member>
        <member name="M:RuriLib.Models.CProxy.GetClient">
            <summary>
            Gets the ProxyClient related to the specific proxy type.
            </summary>
            <returns>The ProxyClient to be used in a HttpRequest</returns>
        </member>
        <member name="M:RuriLib.Models.CProxy.GetStandardClient">
            <summary>
            Gets the standard ProxyClient related to the specific proxy type.
            </summary>
            <returns>The standard ProxyClient (not chained)</returns>
        </member>
        <member name="P:RuriLib.Models.CProxy.Host">
            <summary>The Host string parsed from the proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.Port">
            <summary>The Port string parsed from the proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.IsValidNumeric">
            <summary>Whether the proxy is a valid numeric proxy.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.IsNumeric">
            <summary>Whether the proxy is numeric.</summary>
        </member>
        <member name="P:RuriLib.Models.CProxy.UsedAgo">
            <summary>How long ago the proxy was used.</summary>
        </member>
        <member name="T:RuriLib.Models.Hit">
            <summary>
            Represents the outcome of a successful check, used as Data Type in a Database.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Hit.Data">
            <summary>The data line that was used.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.CapturedData">
            <summary>The list of all variables marked as Capture.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.CapturedString">
            <summary>The list of all variables marked as Capture as a chained string.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.Proxy">
            <summary>The proxy that was used.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.Date">
            <summary>The timestamp of when the Hit was found.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.Type">
            <summary>The type of Hit.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.ConfigName">
            <summary>The name of the Config that was used.</summary>
        </member>
        <member name="P:RuriLib.Models.Hit.WordlistName">
            <summary>The name of the Wordlist that was used.</summary>
        </member>
        <member name="M:RuriLib.Models.Hit.#ctor">
            <summary>Needed for NoSQL deserialization.</summary>
        </member>
        <member name="M:RuriLib.Models.Hit.#ctor(System.String,RuriLib.Models.VariableList,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a Hit given its details.
            </summary>
            <param name="data">The data line used</param>
            <param name="capturedData">The VariableList of all captured data</param>
            <param name="proxy">The proxy used</param>
            <param name="type">The type of the Hit</param>
            <param name="configName">The Config's name</param>
            <param name="wordlistName">The Wordlist's name</param>
        </member>
        <member name="M:RuriLib.Models.Hit.ToFormattedString(System.String)">
            <summary>
            Outputs the Hit details in a given format.
            </summary>
            <param name="format">The format in which variables should be replaced</param>
            <returns>The formatted string with all variables replaced</returns>
        </member>
        <member name="M:RuriLib.Models.Hit.GetHashCode(System.Boolean)">
            <summary>
            Gets a unique hash of the hit.
            </summary>
            <param name="ignoreWordlistName">Whether the wordlist name should affect the generated hash</param>
            <returns>The hash code</returns>
        </member>
        <member name="T:RuriLib.Models.CustomKeychain">
            <summary>
            A KeyChain that can be customized in name and color.
            </summary>
        </member>
        <member name="P:RuriLib.Models.CustomKeychain.Name">
            <summary>The name of the KeyChain.</summary>
        </member>
        <member name="P:RuriLib.Models.CustomKeychain.Color">
            <summary>The color of the KeyChain.</summary>
        </member>
        <member name="T:RuriLib.Models.EnvironmentSettings">
            <summary>
            Settings for customizeable data types used in the library.
            </summary>
        </member>
        <member name="P:RuriLib.Models.EnvironmentSettings.WordlistTypes">
            <summary>List of custom Wordlist Types.</summary>
        </member>
        <member name="P:RuriLib.Models.EnvironmentSettings.CustomKeychains">
            <summary>List of custom KeyChain Types.</summary>
        </member>
        <member name="P:RuriLib.Models.EnvironmentSettings.ExportFormats">
            <summary>List of custom Export Formats.</summary>
        </member>
        <member name="M:RuriLib.Models.EnvironmentSettings.GetWordlistTypeNames">
            <summary>
            Gets the names of all Wordlist Types.
            </summary>
            <returns>The list of all the names of custom Wordlist Types</returns>
        </member>
        <member name="M:RuriLib.Models.EnvironmentSettings.RecognizeWordlistType(System.String)">
            <summary>
            Automatically recognizes a Wordlist Type between the ones available by matching the Regex patterns and returning the first successful match.
            </summary>
            <param name="data">The data for which you want to recognize the Wordlist Type</param>
            <returns>The correct Wordlist Type or (if every Regex match failed) the first one</returns>
        </member>
        <member name="M:RuriLib.Models.EnvironmentSettings.GetCustomKeychainNames">
            <summary>
            Gets the names of all Custom KeyChains.
            </summary>
            <returns>The list of all the names of custom KeyChain types</returns>
        </member>
        <member name="M:RuriLib.Models.EnvironmentSettings.GetCustomKeychain(System.String)">
            <summary>
            Gets a Custom KeyChain given its name.
            </summary>
            <param name="name">The name of the Custom KeyChain</param>
            <returns>The CustomKeychain object if found, a default one if not</returns>
        </member>
        <member name="M:RuriLib.Models.EnvironmentSettings.GetWordlistType(System.String)">
            <summary>
            Gets a Wordlist Type given its name.
            </summary>
            <param name="name">The name of the Wordlist Type</param>
            <returns>The WordlistType object if found, a default one if not</returns>
        </member>
        <member name="T:RuriLib.Models.RuleType">
            <summary>
            The condition for which a Rule is tested.
            </summary>
        </member>
        <member name="F:RuriLib.Models.RuleType.MustContain">
            <summary>The slice must contain the given characters.</summary>
        </member>
        <member name="F:RuriLib.Models.RuleType.MustNotContain">
            <summary>The slice must not contain the given characters.</summary>
        </member>
        <member name="F:RuriLib.Models.RuleType.MinLength">
            <summary>The slice's length must be greater or equal to a given number.</summary>
        </member>
        <member name="F:RuriLib.Models.RuleType.MaxLength">
            <summary>The slice's length must be smaller or equal to a given number.</summary>
        </member>
        <member name="F:RuriLib.Models.RuleType.MustMatchRegex">
            <summary>The slice must match a given regex pattern.</summary>
        </member>
        <member name="T:RuriLib.Models.DataRule">
            <summary>
            Represents a rule that the data line must respect in order to be valid for a given Config.
            </summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.RuleTypes">
            <summary>
            List of Rule types that are displayed in the combobox.
            </summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.RuleStrings">
            <summary>
            List of Rule strings that are displayed in the combobox.
            </summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.SliceName">
            <summary>The name of the specific slice (defined in the WordlistType) this rule refers to.</summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.RuleType">
            <summary>The type of the rule.</summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.RuleString">
            <summary>The characters to search in the sliced value. Defaults are Lowercase, Uppercase, Digit, Symbol. Custom character sets can be created by concatenating the characters in a single string (e.g. ABCDEF).</summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.Id">
            <summary>The id of the rule.</summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.TypeInitialized">
            <summary>Whether the type has been initialized. Used in the View.</summary>
        </member>
        <member name="P:RuriLib.Models.DataRule.StringInitialized">
            <summary>Whether the right-hand term has been initialized. Used in the View.</summary>
        </member>
        <member name="M:RuriLib.Models.DataRule.#ctor(System.Int32)">
            <summary>
            Creates a DataRule given an id.
            </summary>
            <param name="id">The unique id of the rule</param>
        </member>
        <member name="T:RuriLib.Models.WordlistType">
            <summary>
            Class that represents a type of Wordlist with rules to check the validity and to slice the data given a separator.
            </summary>
        </member>
        <member name="P:RuriLib.Models.WordlistType.Verify">
            <summary>Whether to check if the regex successfully matches the input data.</summary>
        </member>
        <member name="P:RuriLib.Models.WordlistType.Regex">
            <summary>The regular expression that validates the input data.</summary>
        </member>
        <member name="P:RuriLib.Models.WordlistType.Name">
            <summary>The name of the Wordlist Type.</summary>
        </member>
        <member name="P:RuriLib.Models.WordlistType.Separator">
            <summary>The separator used for slicing the input data into a list of strings.</summary>
        </member>
        <member name="P:RuriLib.Models.WordlistType.Slices">
            <summary>
            <para>The list of variable names of the slices that will be created from the input data.</para>
            <para>Each slice should be used to generate a pair of values with a variable name and a value taken from the split input data.</para>
            </summary>
        </member>
        <member name="T:RuriLib.Models.KeyChain">
            <summary>
            Represents a set of keys that can be checked in a OR/AND fashion and modifies the status of the BotData if successful.
            </summary>
        </member>
        <member name="T:RuriLib.Models.KeyChain.KeychainType">
            <summary>The returned status upon a successful check of the keys. If no KeyChain was valid, the original status won't be changed.</summary>        
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainType.Success">
            <summary>Sets a SUCCESS status in the bot.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainType.Failure">
            <summary>Sets a FAIL status in the bot.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainType.Ban">
            <summary>Sets a BAN status in the bot.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainType.Retry">
            <summary>Sets a RETRY status in the bot.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainType.Custom">
            <summary>Sets a CUSTOM status in the bot.</summary>
        </member>
        <member name="T:RuriLib.Models.KeyChain.KeychainMode">
            <summary>The mode in which the keys should be checked.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainMode.OR">
            <summary>Trigger the KeyChain if ANY Key is valid.</summary>
        </member>
        <member name="F:RuriLib.Models.KeyChain.KeychainMode.AND">
            <summary>Trigger the KeyChain if ALL the Keys are valid.</summary>
        </member>
        <member name="P:RuriLib.Models.KeyChain.Type">
            <summary>The type of the KeyChain.</summary>
        </member>
        <member name="P:RuriLib.Models.KeyChain.Mode">
            <summary>The mode of the KeyChain.</summary>
        </member>
        <member name="P:RuriLib.Models.KeyChain.CustomType">
            <summary>The type of the KeyChain in case Custom is selected.</summary>
        </member>
        <member name="P:RuriLib.Models.KeyChain.Keys">
            <summary>The collection of Keys in the KeyChain.</summary>
        </member>
        <member name="M:RuriLib.Models.KeyChain.CheckKeys(RuriLib.BotData)">
            <summary>
            Checks all the Keys in the KeyChain.
            </summary>
            <param name="data">The BotData used for variable replacement</param>
            <returns>Whether the KeyChain was triggered or not</returns>
        </member>
        <member name="T:RuriLib.Models.Key">
            <summary>
            Represents a Key in a KeyChain.
            </summary>
        </member>
        <member name="P:RuriLib.Models.Key.LeftTerm">
            <summary>The left-hand term for the comparison.</summary>
        </member>
        <member name="P:RuriLib.Models.Key.Comparer">
            <summary>The comparison operator.</summary>
        </member>
        <member name="P:RuriLib.Models.Key.RightTerm">
            <summary>The right-hand term of the comparison.</summary>
        </member>
        <member name="M:RuriLib.Models.Key.CheckKey(RuriLib.BotData)">
            <summary>
            Checks the comparison between left and right member.
            </summary>
            <param name="data">The BotData used for variable replacement.</param>
            <returns>Whether the comparison is valid</returns>
        </member>
        <member name="T:RuriLib.Models.ValidData">
            <summary>
            Represents the outcome of a check which can be represented in a list and can give information on the details of the check.
            </summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Data">
            <summary>The data line that was checked.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Proxy">
            <summary>The proxy that was used for the check.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.ProxyType">
            <summary>The proxy type.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Result">
            <summary>The result of the check.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Type">
            <summary>The type of the result.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.CapturedData">
            <summary>The data captured during the check.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.UnixDate">
            <summary>The unix timestamp of the check completion.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Timestamp">
            <summary>The timestamp of the check completion as a formatted date.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Time">
            <summary>The timestamp of the check completion as a DateTime object.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Source">
            <summary>The contents of the last page's source code at the end of the check.</summary>
        </member>
        <member name="P:RuriLib.Models.ValidData.Log">
            <summary>The entire log with the details of the check.</summary>
        </member>
        <member name="M:RuriLib.Models.ValidData.#ctor(System.String,System.String,Extreme.Net.ProxyType,RuriLib.BotStatus,System.String,System.String,System.String,System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Creates a ValidData object after a valid check.
            </summary>
            <param name="data">The data line that was used in the check</param>
            <param name="proxy">The proxy that was used for the check (empty string if none)</param>
            <param name="proxyType">The proxy type</param>
            <param name="result">The result of the check</param>
            <param name="type">The result type</param>
            <param name="capturedData">The data captured during the check</param>
            <param name="source">The last page source code of the check</param>
            <param name="log">The detailed log of the check</param>
        </member>
        <member name="T:RuriLib.Models.VariableList">
            <summary>
            Class that allows to easily manage a list of CVar objects.
            </summary>
        </member>
        <member name="P:RuriLib.Models.VariableList.All">
            <summary>The whole list of variables.</summary>
        </member>
        <member name="P:RuriLib.Models.VariableList.Captures">
            <summary>The list of all variables marked as Capture.</summary>
        </member>
        <member name="P:RuriLib.Models.VariableList.Singles">
            <summary>The list of all variables of type Single.</summary>
        </member>
        <member name="P:RuriLib.Models.VariableList.Lists">
            <summary>The list of all variables of type List.</summary>
        </member>
        <member name="P:RuriLib.Models.VariableList.Dictionaries">
            <summary>The list of all variables of type Dictionary.</summary>
        </member>
        <member name="M:RuriLib.Models.VariableList.#ctor">
            <summary>
            Standard constructor that initializes an empty variable list.
            </summary>
        </member>
        <member name="M:RuriLib.Models.VariableList.#ctor(System.Collections.Generic.List{RuriLib.Models.CVar})">
            <summary>
            Initializes a variable list starting from an existing list of variables.
            </summary>
            <param name="list">The list of variables.</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.Get(System.String)">
            <summary>
            Gets a variable given its name.
            </summary>
            <param name="name">The name of the variable</param>
            <returns>The variable or null if it wasn't found.</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.Get(System.String,RuriLib.Models.CVar.VarType)">
            <summary>
            Gets a variable given its name and type.
            </summary>
            <param name="name">The name of the variable</param>
            <param name="type">The type of the variable</param>
            <returns>The variable or null if it wasn't found.</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.GetSingle(System.String)">
            <summary>
            Helper method that gets the value of a variable of type Single.
            </summary>
            <param name="name">The name of the Single variable</param>
            <returns>The string value or null if it wasn't found.</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.GetList(System.String)">
            <summary>
            Helper method that gets the value of a variable of type List.
            </summary>
            <param name="name">The name of the List variable</param>
            <returns>The list of strings value or null if it wasn't found.</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.GetDictionary(System.String)">
            <summary>
            Helper method that gets the value of a variable of type Dictionary.
            </summary>
            <param name="name">The name of the Dictionary variable</param>
            <returns>The dictionary value or null if it wasn't found.</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.VariableExists(System.String)">
            <summary>
            Helper method that checks if a variable exists given its name.
            </summary>
            <param name="name">The name of the variable</param>
            <returns>True if the variable exists</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.VariableExists(System.String,RuriLib.Models.CVar.VarType)">
            <summary>
            Helper method that checks if a variable exists given its name and type.
            </summary>
            <param name="name">The name of the variable</param>
            <param name="type">The type of the variable</param>
            <returns>True if the variable exists and matches the given type</returns>
        </member>
        <member name="M:RuriLib.Models.VariableList.Set(RuriLib.Models.CVar)">
            <summary>
            Adds a CVar object to the variable list.
            </summary>
            <param name="variable">The CVar object to add</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.SetHidden(System.String,System.Object)">
            <summary>
            Adds a hidden CVar object to the variable list.
            </summary>
            <param name="name">The name of the variable to add</param>
            <param name="value">The value of the variable to add</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.SetNew(RuriLib.Models.CVar)">
            <summary>
            Adds a CVar object to the variable list only if no other variable with the same name exists.
            </summary>
            <param name="variable">The CVar object to add</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.Remove(System.String)">
            <summary>
            Removes a non-hidden variable given its name.
            </summary>
            <param name="name">The name of the variable to remove</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.Remove(RuriLib.Functions.Conditions.Comparer,System.String,RuriLib.BotData)">
            <summary>
            <para>Removes all non-hidden variables if their name matches a condition.</para>
            <para>The name of the variables in the list are the left-hand term of the comparison.</para>
            </summary>
            <param name="comparer">The comparison operator</param>
            <param name="name">The right-hand term of the comparison</param>
            <param name="data">The BotData object used for variable replacement</param>
        </member>
        <member name="M:RuriLib.Models.VariableList.ToCaptureString">
            <summary>
            Generates a string where all the variables marked as Capture are printed in an organized fashion.
            </summary>
            <returns>The chained capture string.</returns>
        </member>
        <member name="T:RuriLib.Runner.WorkerStatus">
            <summary>
            Whether the AbortableBackgroundWorker is idle, stopping or working.
            </summary>
        </member>
        <member name="F:RuriLib.Runner.WorkerStatus.Idle">
            <summary>The Worker is not working.</summary>
        </member>
        <member name="F:RuriLib.Runner.WorkerStatus.Running">
            <summary>The Worker is working.</summary>
        </member>
        <member name="F:RuriLib.Runner.WorkerStatus.Stopping">
            <summary>The Worker is cancelling its work.</summary>
        </member>
        <member name="T:RuriLib.Runner.AbortableBackgroundWorker">
            <summary>
            A Worker that can be aborted like normal threads.
            </summary>
        </member>
        <member name="P:RuriLib.Runner.AbortableBackgroundWorker.Status">
            <summary>The Status of the Worker.</summary>
        </member>
        <member name="P:RuriLib.Runner.AbortableBackgroundWorker.Id">
            <summary>The Id of the Worker.</summary>
        </member>
        <member name="M:RuriLib.Runner.AbortableBackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
            <summary>
            OnDoWork that supports aborting.
            </summary>
            <param name="e">The DoWorkEventArgs</param>
        </member>
        <member name="M:RuriLib.Runner.AbortableBackgroundWorker.Abort">
            <summary>Calls the Abort() method on the inner Thread.</summary>
        </member>
        <member name="T:RuriLib.Runner.IRunnerMessaging">
            <summary>
            Interface used to communicate between the RunnerViewModel and the corresponding View.
            </summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.MessageArrived">
            <summary>A message has arrived.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.WorkerStatusChanged">
            <summary>The status of the Master Worker changed.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.FoundHit">
            <summary>A Hit was found.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.ReloadProxies">
            <summary>The proxies need to be reloaded.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.DispatchAction">
            <summary>An Action needs to be executed on the main thread.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.SaveProgress">
            <summary>The progress needs to be saved.</summary>
        </member>
        <member name="E:RuriLib.Runner.IRunnerMessaging.AskCustomInputs">
            <summary>The user needs to type the custom inputs.</summary>
        </member>
        <member name="T:RuriLib.Runner.RunnerBotViewModel">
            <summary>
            Bot class. Includes a Worker that is used to perform checks on input data in the Runner.
            </summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Id">
            <summary>The unique id of the bot (usually between 1 and the total amount of Bots).</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Data">
            <summary>The data that needs to be checked.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Proxy">
            <summary>The proxy that the Worker is using to perform requests.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Status">
            <summary>The status of the bot.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Worker">
            <summary>The Worker that performs the checks.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.Driver">
            <summary>The Selenium WebDriver.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerBotViewModel.IsDriverOpen">
            <summary>Whether the Selenium WebDriver is open or not.</summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerBotViewModel.#ctor(System.Int32)">
            <summary>
            Creates an instance of a bot given an id.
            </summary>
            <param name="id">The unique id that will be assigned to the bot.</param>
        </member>
        <member name="T:RuriLib.Runner.ProxyMode">
            <summary>
            Whether to use proxies or not for the current session.
            </summary>
        </member>
        <member name="F:RuriLib.Runner.ProxyMode.Default">
            <summary>Use the default setting in the config.</summary>
        </member>
        <member name="F:RuriLib.Runner.ProxyMode.On">
            <summary>Always use proxies.</summary>
        </member>
        <member name="F:RuriLib.Runner.ProxyMode.Off">
            <summary>Never use proxies.</summary>
        </member>
        <member name="T:RuriLib.Runner.RunnerViewModel">
            <summary>
            Main class that handles all the multi-threaded checking of a Wordlist given a Config.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.#ctor(RuriLib.Models.EnvironmentSettings,RuriLib.ViewModels.RLSettingsViewModel,System.Random)">
            <summary>
            Constructs the RunnerViewModel instance.
            </summary>
            <param name="environment">The environment settings</param>
            <param name="settings">The RuriLib settings</param>
            <param name="random">A reference to the global random generator</param>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Master">
            <summary>The Master Worker that manages all the other Workers and updates the observable properties.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.WorkerStatus">
            <summary>The status of the Master Worker.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Bots">
            <summary>The managed workers that run single data checks.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Busy">
            <summary>Whether the Master Worker is busy or idle.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ControlsEnabled">
            <summary>Whether the user can set the properties (a.k.a. whether the Master Worker is idle).</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.BotsAmount">
            <summary>The amount of bots to run simultaneously for multi-threaded checking.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.StartingPoint">
            <summary>How many data lines to skip before starting the checking process.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ProgressCount">
            <summary>The amount of data lines checked, including the starting point.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Progress">
            <summary>The rounded percentage of checked data lines (0 to 100).</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CPM">
            <summary>The checks per minute.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Balance">
            <summary>The remaining balance in the captcha solver account.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.BalanceString">
            <summary>The remaining balance in the captcha solver account preceeded by a $ sign.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ProxyMode">
            <summary>The Proxy Mode.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.UseProxies">
            <summary>Whether proxies can be used for the current session given the Proxy Mode and the Config.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Config">
            <summary>The loaded Config to use for the check.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ConfigName">
            <summary>The name of the loaded Config.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Wordlist">
            <summary>The loaded Wordlist to use for the check.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.WordlistName">
            <summary>The name of the loaded Wordlist.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.WordlistSize">
            <summary>The size of the loaded Wordlist.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ProxyPool">
            <summary>The pool from which bots can get a proxy upon request.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TotalProxiesCount">
            <summary>The total amount of proxies loaded.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.AliveProxiesCount">
            <summary>The amount of proxies loaded that are alive.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.AvailableProxiesCount">
            <summary>The amount of proxies loaded that are available.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.BannedProxiesCount">
            <summary>The amount of proxies loaded that are banned.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.BadProxiesCount">
            <summary>The amount of proxies loaded that are bad.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.DataPool">
            <summary>The pool from which the Master worker draws data to assign to bots for the checks.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.DataSize">
            <summary>The size of the DataPool.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CustomInputs">
            <summary>The pairs of (variable name, value) set by the user.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.GlobalVariables">
            <summary>The Global Variables list that are set in all bots when they start.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.GlobalCookies">
            <summary>The Global Cookies list that are set in all bots when they start.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CustomAction">
            <summary>If not null, bots will perform this action instead of the default behaviour.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.FailedList">
            <summary>The list of data lines checked with a FAIL outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.HitsList">
            <summary>The list of data lines checked with a SUCCESS outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CustomList">
            <summary>The list of data lines checked with a CUSTOM outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ToCheckList">
            <summary>The list of data lines checked with a NONE outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.EmptyList">
            <summary>Auxiliary empty list.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Checked">
            <summary>The collection of data that was checked with a positive outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ResultsFilter">
            <summary>Filter based on the Bot Status.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.FailCount">
            <summary>Amount of data lines checked with a FAIL outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.HitCount">
            <summary>Amount of data lines checked with a SUCCESS outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CustomCount">
            <summary>Amount of data lines checked with a CUSTOM outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.ToCheckCount">
            <summary>Amount of data lines checked with a NONE outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.RetryCount">
            <summary>Amount of data lines retried due to a BAN, RETRY or ERROR outcome.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TestedCount">
            <summary>Total amount of successfully tested data lines.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.Stats">
            <summary>
            Statistics of the checking process.
            </summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.IsReloadingProxies">
            <summary>Whether the workers are waiting for proxies to be reloaded.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.IsCPMLocked">
            <summary>Whether the CPM is already being calculated.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.NoProxyWarningSent">
            <summary>Whether the warning about no proxy availability has already been issued.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.CustomInputsInitialized">
            <summary>Whether the Custom Inputs have already been initialized.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TimerDays">
            <summary>Days elapsed since the runner was started.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TimerHours">
            <summary>Hours elapsed since the runner was started.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TimerMinutes">
            <summary>Minutes elapsed since the runner was started.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TimerSeconds">
            <summary>Seconds elapsed since the runner was started.</summary>
        </member>
        <member name="P:RuriLib.Runner.RunnerViewModel.TimeLeft">
            <summary>Representation of the expected time left to check the remaining data lines.</summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.SetConfig(RuriLib.Config,System.Boolean)">
            <summary>
            Sets a Config in the Runner instance.
            </summary>
            <param name="config">The Config to be used for the check</param>
            <param name="setRecommended">Whether to automatically set the recommended amount of bots from the Config settings.</param>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.SetWordlist(RuriLib.Models.Wordlist)">
            <summary>
            Sets a Wordlist in the Runner instance.
            </summary>
            <param name="wordlist">The Wordlist to be used for the check</param>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.Start">
            <summary>
            Starts the Master Worker.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.Stop">
            <summary>
            Stops the Master Worker.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.ForceStop">
            <summary>
            Forcefully aborts the Bots and stops the Master Worker.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.ShouldStop">
            <summary>
            Checks if the Master Worker is running and has not been cancelled.
            </summary>
            <returns>True if the Master Worker is stopping or has already stopped</returns>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.UpdateTimer">
            <summary>
            Update the observable properties for the Timer.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.UpdateStats">
            <summary>
            Update the observable properties for the statistics.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.UpdateCPM">
            <summary>
            Update the observable CPM property.
            </summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.MessageArrived">
            <summary>Fired when a new message needs to be logged.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.WorkerStatusChanged">
            <summary>Fired when the Master Worker status changed.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.FoundHit">
            <summary>Fired when a Hit was found.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.ReloadProxies">
            <summary>Fired when proxies need to be reloaded.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.DispatchAction">
            <summary>/// Fired when an Action could change the UI and needs to be dispatched to another thread (usually it's handled by the UI thread).</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.SaveProgress">
            <summary>Fired when the progress record needs to be saved to the Database.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.AskCustomInputs">
            <summary>Fired when custom inputs from the user are required.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.ConfigChanged">
            <summary>Fired when the currently selected Config changed.</summary>
        </member>
        <member name="E:RuriLib.Runner.RunnerViewModel.WordlistChanged">
            <summary>Fired when the currently selected Wordlist changed.</summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.LoadProxies">
            <summary>
            Loads the proxies from the specified source.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.GetProxiesFromRemoteSource(System.String,Extreme.Net.ProxyType,System.String,System.String)">
            <summary>
            Loads a list of proxies from a remote source.
            </summary>
            <param name="url">The URL of the remote source</param>
            <param name="type">The type of the proxies</param>
            <param name="pattern">The Regex pattern to be used for parsing the proxies</param>
            <param name="output">The output format of the groups matched by the regex</param>
            <returns>The list of CProxy objects loaded from the API</returns>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.GetProxiesFromRemoteSourceAsync(System.String,Extreme.Net.ProxyType,System.String,System.String)">
            <summary>
            Loads a list of proxies from a remote source asynchronously.
            </summary>
            <param name="url">The URL of the remote source</param>
            <param name="type">The type of the proxies</param>
            <param name="pattern">The Regex pattern to be used for parsing the proxies</param>
            <param name="output">The output format of the groups matched by the regex</param>
            <returns>The list of CProxy objects loaded from the API</returns>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.GetProxiesFromFile(System.String,Extreme.Net.ProxyType)">
            <summary>
            Loads a list of proxies from a file.
            </summary>
            <param name="fileName">The file containing the proxies, one per line</param>
            <param name="type">The type of the proxies</param>
            <returns>The list of CProxy objects loaded from the file</returns>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.AbortAllBots">
            <summary>
            Cancels the async job on all bots and quits all the drivers.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.QuitAllDrivers">
            <summary>
            Quits all the open selenium drivers.
            </summary>
        </member>
        <member name="M:RuriLib.Runner.RunnerViewModel.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps an integer to an interval of values.
            </summary>
            <param name="a">The integer to clamp</param>
            <param name="min">The minimum value of the interval</param>
            <param name="max">The maximum value of the interval</param>
            <returns>The clamped integer</returns>
        </member>
        <member name="T:RuriLib.BlockBase">
            <summary>
            A generic block used to process information in RuriLib.
            </summary>
        </member>
        <member name="P:RuriLib.BlockBase.Label">
            <summary>The label of the block.</summary>
        </member>
        <member name="P:RuriLib.BlockBase.Disabled">
            <summary>Whether the block should be skipped or processed.</summary>
        </member>
        <member name="P:RuriLib.BlockBase.IsSelenium">
            <summary>Whether the block is a selenium-related block.</summary>
        </member>
        <member name="P:RuriLib.BlockBase.IsCaptcha">
            <summary>Whether the block is a captcha-related block.</summary>
        </member>
        <member name="M:RuriLib.BlockBase.FromLS(System.String)">
            <summary>
            Builds a block from a line of LoliScript code.
            </summary>
            <param name="line">The line of LoliScript code</param>
            <returns>The parsed block object</returns>
        </member>
        <member name="M:RuriLib.BlockBase.FromLS(System.Collections.Generic.List{System.String})">
            <summary>
            Builds a block from multiple lines of LoliScript code.
            </summary>
            <param name="lines">The lines of LoliScript code</param>
            <returns>The parsed block object</returns>
        </member>
        <member name="M:RuriLib.BlockBase.ToLS(System.Boolean)">
            <summary>
            Converts the block to LoliScript code.
            </summary>
            <param name="indent"></param>
            <returns></returns>
        </member>
        <member name="M:RuriLib.BlockBase.Process(RuriLib.BotData)">
            <summary>
            Executes the actual block logic.
            </summary>
            <param name="data">The BotData needed for variable replacement</param>
        </member>
        <member name="M:RuriLib.BlockBase.ReplaceValuesRecursive(System.String,RuriLib.BotData)">
            <summary>
            Replaces variables recursively, expanding lists or dictionaries with jolly indices.
            </summary>
            <param name="input">The string to replace variables into</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>An array of values obtained replacing the original input with each of the possible values of the first List or Dictionary variable found</returns>
        </member>
        <member name="M:RuriLib.BlockBase.ReplaceValues(System.String,RuriLib.BotData)">
            <summary>
            Replaces variables in a given input string.
            </summary>
            <param name="input">The string to replace variables into</param>
            <param name="data">The BotData needed for variable replacement</param>
            <returns>The string where variables have been replaced</returns>
        </member>
        <member name="M:RuriLib.BlockBase.ParseArguments(System.String,System.Char,System.Char)">
            <summary>
            Parses an argument between two bracket delimiters.
            </summary>
            <param name="input">The string to parse the argument from</param>
            <param name="delimL">The left bracket delimiter</param>
            <param name="delimR">The right bracket delimiter</param>
            <returns>The argument between the delimiters</returns>
        </member>
        <member name="M:RuriLib.BlockBase.UpdateSeleniumData(RuriLib.BotData)">
            <summary>
            Updates the ADDRESS and SOURCE variables basing on the selenium-driven browser's URL bar and page source.
            </summary>
            <param name="data">The BotData containing the driver and the variables</param>
        </member>
        <member name="M:RuriLib.BlockBase.InsertVariable(RuriLib.BotData,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a single variable with the given value.
            </summary>
            <param name="data">The BotData used for variable replacement and insertion</param>
            <param name="isCapture">Whether the variable should be marked for Capture</param>
            <param name="value">The value of the variable</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="prefix">The string to add at the start of the value</param>
            <param name="suffix">The string to add at the end of the value</param>
            <param name="urlEncode">Whether to URLencode the values before creating the variables</param>
            <param name="createEmpty">Whether to create an empty (single) variable if the list of values is empty</param>
        </member>
        <member name="M:RuriLib.BlockBase.InsertVariable(RuriLib.BotData,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a list variable with the given value.
            </summary>
            <param name="data">The BotData used for variable replacement and insertion</param>
            <param name="isCapture">Whether the variable should be marked for Capture</param>
            <param name="values">The list of values</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="prefix">The string to add at the start of the value</param>
            <param name="suffix">The string to add at the end of the value</param>
            <param name="urlEncode">Whether to URLencode the values before creating the variables</param>
            <param name="createEmpty">Whether to create an empty (single) variable if the list of values is empty</param>
        </member>
        <member name="M:RuriLib.BlockBase.InsertVariable(RuriLib.BotData,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a single or list variable with the given value.
            </summary>
            <param name="data">The BotData used for variable replacement and insertion</param>
            <param name="isCapture">Whether the variable should be marked for Capture</param>
            <param name="recursive">Whether the variable to add should be a list or a single value</param>
            <param name="values">The list of values. In case recursive is set to false, only the first value of the list will be taken.</param>
            <param name="variableName">The name of the variable to create</param>
            <param name="prefix">The string to add at the start of the value</param>
            <param name="suffix">The string to add at the end of the value</param>
            <param name="urlEncode">Whether to URLencode the values before creating the variables</param>
            <param name="createEmpty">Whether to create an empty (single) variable if the list of values is empty</param>
        </member>
        <member name="M:RuriLib.BlockBase.TruncatePretty(System.String,System.Int32)">
            <summary>
            Truncates a string to fit a given size and adds ' [...]' (5 characters) at the end to display that the string would be longer.
            </summary>
            <param name="input">The string to truncate</param>
            <param name="max">The maximum length of the string</param>
            <returns>The truncated string, or the same string if its length was not exceeding the maximum size</returns>
        </member>
        <member name="T:RuriLib.BlockBypassCF">
            <summary>
            A block that can bypass Cloudflare protections.
            </summary>
        </member>
        <member name="P:RuriLib.BlockBypassCF.Url">
            <summary>The URL of the Cloudflare-protected website.</summary>
        </member>
        <member name="P:RuriLib.BlockBypassCF.UserAgent">
            <summary>The User-Agent header to use when solving the challenge.</summary>
        </member>
        <member name="P:RuriLib.BlockBypassCF.PrintResponseInfo">
            <summary>Whether to print the full response info to the log.</summary>
        </member>
        <member name="P:RuriLib.BlockBypassCF.AutoRedirect">
            <summary>Whether to enable auto-redirect (situational, depends on site).</summary>
        </member>
        <member name="P:RuriLib.BlockBypassCF.SecurityProtocol">
            <summary>The security protocol(s) to use for the HTTPS request.</summary>
        </member>
        <member name="M:RuriLib.BlockBypassCF.#ctor">
            <summary>
            Creates a Cloudflare bypass block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockBypassCF.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockBypassCF.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockBypassCF.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockImageCaptcha">
            <summary>
            A block that solves an image captcha challenge.
            </summary>
        </member>
        <member name="P:RuriLib.BlockImageCaptcha.Url">
            <summary>The URL to download the captcha image from.</summary>
        </member>
        <member name="P:RuriLib.BlockImageCaptcha.VariableName">
            <summary>The name of the variable where the challenge solution will be stored.</summary>
        </member>
        <member name="P:RuriLib.BlockImageCaptcha.Base64">
            <summary>Whether the Url is a base64-encoded captcha image.</summary>
        </member>
        <member name="P:RuriLib.BlockImageCaptcha.SendScreenshot">
            <summary>Whether the captcha image needs to be taken by the last screenshot taken by selenium.</summary>
        </member>
        <member name="P:RuriLib.BlockImageCaptcha.UserAgent">
            <summary>The user agent to use in the image download request.</summary>
        </member>
        <member name="M:RuriLib.BlockImageCaptcha.#ctor">
            <summary>
            Creates an Image Captcha block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockImageCaptcha.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockImageCaptcha.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockImageCaptcha.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockCaptcha">
            <summary>
            A block that can solve captcha challenges.
            </summary>
        </member>
        <member name="P:RuriLib.BlockCaptcha.Balance">
            <summary>The balance of the account of the captcha-solving service.</summary>
        </member>
        <member name="M:RuriLib.BlockCaptcha.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockFunction">
            <summary>
            A block that can execute a specific function on one or multiple inputs.
            </summary>
        </member>
        <member name="T:RuriLib.BlockFunction.Function">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Constant">
            <summary>Simply replaced the variables of the input.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Base64Encode">
            <summary>Encodes an input as a base64 string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Base64Decode">
            <summary>Decodes the string from a base64-encoded input.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Hash">
            <summary>Hashes an input string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.HMAC">
            <summary>Generates a HMAC for a given string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Translate">
            <summary>Translates words in a given string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.DateToUnixTime">
            <summary>Converts a formatted date to a unix timestamp.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Length">
            <summary>Gets the length of a string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.ToLowercase">
            <summary>Converts all uppercase caracters in a string to lowercase.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.ToUppercase">
            <summary>Converts all lowercase characters in a string to uppercase.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Replace">
            <summary>Replaces some text with something else, with or without using regex.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.RegexMatch">
            <summary>Gets the first match for a specific regex pattern.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.URLEncode">
            <summary>Encodes the input to be used in a URL.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.URLDecode">
            <summary>Decodes a URL-encoded input.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Unescape">
            <summary>Unescapes characters in a string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.HTMLEntityEncode">
            <summary>Encodes the input to be displayed in HTML or XML.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.HTMLEntityDecode">
            <summary>Decoded an input containing HTML or XML entities.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.UnixTimeToDate">
            <summary>Converts a unix timestamp to a formatted date.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.CurrentUnixTime">
            <summary>Retrieves the current time as a unix timestamp.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.UnixTimeToISO8601">
            <summary>Converts a unix timestamp to the ISO8601 format.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.RandomNum">
            <summary>Generates a random integer.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.RandomString">
            <summary>Generates a random string based on a mask.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Ceil">
            <summary>Rounds a decimal input to the upper integer.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Floor">
            <summary>Rounds a decimal input to the lower integer.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Round">
            <summary>Rounds a decimal input to the nearest integer.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Compute">
            <summary>Computes mathematical operations between decimal numbers.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.CountOccurrences">
            <summary>Counts the occurrences of a string in another string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.ClearCookies">
            <summary>Clears the cookie jar used for HTTP requests.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.RSAEncrypt">
            <summary>Encrypts a string with RSA.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.RSAPKCS1PAD2">
            <summary>Encrypts a string with RSA PKCS1PAD2.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Delay">
            <summary>Waits a given amount of milliseconds.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.CharAt">
            <summary>Retrieves the character at a given index in the input string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Substring">
            <summary>Gets a substring of the input.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.ReverseString">
            <summary>Reverses the input string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.Trim">
            <summary>Removes leading or trailing whitespaces from a string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.GetRandomUA">
            <summary>Gets a valid random User-Agent header.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.AESEncrypt">
            <summary>Encrypts a string with AES.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.AESDecrypt">
            <summary>Decrypts an AES-encrypted string.</summary>
        </member>
        <member name="F:RuriLib.BlockFunction.Function.PBKDF2PKCS5">
            <summary>Generates a key using a password based KDF.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.VariableName">
            <summary>The name of the output variable.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.IsCapture">
            <summary>Whether the output variable should be marked for Capture.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.InputString">
            <summary>The input string on which the function will be executed (not always needed).</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.FunctionType">
            <summary>The function to execute.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.HashType">
            <summary>The hashing function to use.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.InputBase64">
            <summary>Whether the input is a base64-encoded string instead of UTF8.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.HmacKey">
            <summary>The key used to authenticate the message.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.HmacBase64">
            <summary>Whether to output the message as a base64-encoded string instead of a hex-encoded string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KeyBase64">
            <summary>Whether the HMAC Key is a base64-encoded string instead of UTF8.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.StopAfterFirstMatch">
            <summary>Whether to stop translating after the first match.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.TranslationDictionary">
            <summary>The dictionary containing the words and their translation.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.DateFormat">
            <summary>The format of the date (y = year, M = month, d = day, H = hour, m = minute, s = second).</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.ReplaceWhat">
            <summary>The text to replace.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.ReplaceWith">
            <summary>The replacement text.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.UseRegex">
            <summary>Whether to use regex for replacing.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RegexMatch">
            <summary>The regex pattern to match.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RandomMin">
            <summary>The minimum random number that can be generated (inclusive).</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RandomMax">
            <summary>The maximum random number that can be generated (exclusive).</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RandomZeroPad">
            <summary>Whether to pad with zeros on the left to match the length of the maximum provided.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.StringToFind">
            <summary>The string to count the occurrences of.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RsaN">
            <summary>The modulus of the RSA public key as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RsaE">
            <summary>The exponent of the RSA public key as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RsaD">
            <summary>The exponent of the RSA private key as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.RsaOAEP">
            <summary>Whether to use OAEP padding instead of PKCS v1.5.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.CharIndex">
            <summary>The index of the wanted character.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.SubstringIndex">
            <summary>The starting index for the substring.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.SubstringLength">
            <summary>The length of the wanted substring.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.UserAgentSpecifyBrowser">
            <summary>Whether to only limit the UA generation to a certain browser.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.UserAgentBrowser">
            <summary>The browser for which the User Agent should be generated.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.AesKey">
            <summary>The keys used for AES encryption and decryption as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.AesIV">
            <summary>The initial value as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.AesMode">
            <summary>The cipher mode.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.AesPadding">
            <summary>The padding mode.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KdfSalt">
            <summary>The KDF's salt as a base64 string.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KdfSaltSize">
            <summary>The size of the generated salt (in bytes) in case none is specified.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KdfIterations">
            <summary>The number of times to perform the algorithm.</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KdfKeySize">
            <summary>The size of the generated key (in bytes).</summary>
        </member>
        <member name="P:RuriLib.BlockFunction.KdfAlgorithm">
            <summary>The size of the generated salt (in bytes) in case none is specified.</summary>
        </member>
        <member name="M:RuriLib.BlockFunction.#ctor">
            <summary>
            Creates a Function block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockFunction.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockFunction.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockFunction.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockFunction.GetHash(System.String,RuriLib.Functions.Crypto.Hash,System.Boolean)">
            <summary>
            Hashes a string using the specified hashing function.
            </summary>
            <param name="baseString">The string to hash</param>
            <param name="type">The hashing function</param>
            <param name="inputBase64">Whether the base string should be treated as base64 encoded (if false, it will be treated as UTF8 encoded)</param>
            <returns>The hash digest as a hex-encoded uppercase string.</returns>
        </member>
        <member name="M:RuriLib.BlockFunction.Hmac(System.String,RuriLib.Functions.Crypto.Hash,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the HMAC signature of a message given a key and a hashing function.
            </summary>
            <param name="baseString">The message to sign</param>
            <param name="type">The hashing function</param>
            <param name="key">The HMAC key</param>
            <param name="inputBase64">Whether the input string should be treated as base64 encoded (if false, it will be treated as UTF8 encoded)</param>
            <param name="keyBase64">Whether the key string should be treated as base64 encoded (if false, it will be treated as UTF8 encoded)</param>
            <param name="outputBase64">Whether the output should be encrypted as a base64 string</param>
            <returns>The HMAC signature</returns>
        </member>
        <member name="M:RuriLib.BlockFunction.GetDictionary">
            <summary>
            Builds a string containing translation keys.
            </summary>
            <returns>One translation key per line, with name and value separated by a colon</returns>
        </member>
        <member name="M:RuriLib.BlockFunction.SetDictionary(System.String[])">
            <summary>
            Sets translation keys from an array of lines.
            </summary>
            <param name="lines">The lines containing the colon-separated name and value of the translation keys</param>
        </member>
        <member name="M:RuriLib.BlockFunction.CountStringOccurrences(System.String,System.String)">
            <summary>
            Counts how many times a string occurs inside another string.
            </summary>
            <param name="input">The long string</param>
            <param name="text">The text to search</param>
            <returns>How many times the text appears in the long string</returns>
        </member>
        <member name="M:RuriLib.BlockFunction.SplitInChunks(System.String,System.Int32)">
            <summary>
            Splits a string in chunks of a given size.
            </summary>
            <param name="str">The string to split</param>
            <param name="chunkSize">The maximum chunk size</param>
            <returns>An array of strings where the last one might be shorter than the maximum chunk size.</returns>
        </member>
        <member name="T:RuriLib.BlockKeycheck">
            <summary>
            A block that changes the bot status according to some conditions.
            </summary>
        </member>
        <member name="P:RuriLib.BlockKeycheck.BanOn4XX">
            <summary>Whether to set the bot status to BAN if the last HTTP code was of type 4.</summary>
        </member>
        <member name="P:RuriLib.BlockKeycheck.BanOnToCheck">
            <summary>Whether to set the bot status as BAN if no keychain was valid.</summary>
        </member>
        <member name="F:RuriLib.BlockKeycheck.KeyChains">
            <summary>The list of all keychains.</summary>
        </member>
        <member name="M:RuriLib.BlockKeycheck.#ctor">
            <summary>
            Creates a KeyCheck block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockKeycheck.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockKeycheck.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockKeycheck.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.ParseType">
            <summary>
            The allowed parsing algorithms.
            </summary>
        </member>
        <member name="F:RuriLib.ParseType.LR">
            <summary>Algorithm that parses text between two strings.</summary>
        </member>
        <member name="F:RuriLib.ParseType.CSS">
            <summary>Algorithm that parses a given attribute from an HTML element identified by a CSS Selector.</summary>
        </member>
        <member name="F:RuriLib.ParseType.JSON">
            <summary>Algorithm that parses values inside a json object.</summary>
        </member>
        <member name="F:RuriLib.ParseType.XPATH">
            <summary>Algorithm that parses a given attribute from an HTML element identified by xpath.</summary>
        </member>
        <member name="F:RuriLib.ParseType.REGEX">
            <summary>Algorithm that extracts the text inside matched regex groups.</summary>
        </member>
        <member name="T:RuriLib.BlockParse">
            <summary>
            A block that parses data from a string.
            </summary>
        </member>
        <member name="P:RuriLib.BlockParse.ParseTarget">
            <summary>The string to parse data from.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.VariableName">
            <summary>The name of the output variable where the parsed text will be stored.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.IsCapture">
            <summary>Whether the output variable should be marked as Capture.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.Prefix">
            <summary>The string to add to the beginning of the parsed data.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.Suffix">
            <summary>The string to add to the end of the parsed data.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.Recursive">
            <summary>Whether to parse multiple values that match the criteria or just the first one.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.DotMatches">
            <summary>Whether Regex . matches over multiple lines.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.CaseSensitive">
            <summary>Whether Regex matches are case sensitive.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.EncodeOutput">
            <summary>Whether to URL encode the parsed text.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.CreateEmpty">
            <summary>Whether to create the variable with an empty value if the parsing was not successful.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.Type">
            <summary>The parsing algorithm being used.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.LeftString">
            <summary>The string to the immediate left of the text to parse. An empty string means the start of the input.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.RightString">
            <summary>The string to the immediate right of the text to parse. An empty string means the end of the input.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.UseRegexLR">
            <summary>Whether to use a regex pattern to match a text between two strings instead of the standard algorithm.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.CssSelector">
            <summary>The CSS selector that addresses the desired element in the HTML page.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.AttributeName">
            <summary>The name of the attribute from which to parse the value.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.CssElementIndex">
            <summary>The index of the desired element when the selector matches multiple elements.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.JsonField">
            <summary>The name of the json field for which we want to retrieve the value.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.JTokenParsing">
            <summary>Whether to parse the json object using jtoken paths.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.RegexString">
            <summary>The regex pattern that matches parts of the text inside groups.</summary>
        </member>
        <member name="P:RuriLib.BlockParse.RegexOutput">
            <summary>The way the content of the matched groups should be formatted. [0] will be replaced with the full match, [1] with the first group etc.</summary>
        </member>
        <member name="M:RuriLib.BlockParse.#ctor">
            <summary>
            Creates a Parse block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockParse.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockParse.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockParse.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.BlockRecaptcha">
            <summary>
            A block that solves a reCaptcha challenge.
            </summary>
        </member>
        <member name="P:RuriLib.BlockRecaptcha.VariableName">
            <summary>The name of the output variable where the challenge solution will be stored.</summary>
        </member>
        <member name="P:RuriLib.BlockRecaptcha.Url">
            <summary>The URL where the reCaptcha challenge appears.</summary>
        </member>
        <member name="P:RuriLib.BlockRecaptcha.SiteKey">
            <summary>The Google SiteKey found in the page's source code.</summary>
        </member>
        <member name="M:RuriLib.BlockRecaptcha.#ctor">
            <summary>
            Creates a reCaptcha block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockRecaptcha.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockRecaptcha.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockRecaptcha.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.RequestType">
            <summary>
            The types of request that can be performed.
            </summary>
        </member>
        <member name="F:RuriLib.RequestType.Standard">
            <summary>A standard request with standard content.</summary>
        </member>
        <member name="F:RuriLib.RequestType.BasicAuth">
            <summary>A request which uses the 'Authentication: Basic' header.</summary>
        </member>
        <member name="F:RuriLib.RequestType.Multipart">
            <summary>A request which contains multipart content (strings and/or files).</summary>
        </member>
        <member name="F:RuriLib.RequestType.Raw">
            <summary>A request which sends a raw byte stream.</summary>
        </member>
        <member name="T:RuriLib.MultipartContentType">
            <summary>
            The available types of multipart contents.
            </summary>
        </member>
        <member name="F:RuriLib.MultipartContentType.String">
            <summary>A string content.</summary>
        </member>
        <member name="F:RuriLib.MultipartContentType.File">
            <summary>A file content.</summary>
        </member>
        <member name="T:RuriLib.ResponseType">
            <summary>
            The type of data expected inside the HTTP response.
            </summary>
        </member>
        <member name="F:RuriLib.ResponseType.String">
            <summary>A string response, e.g. an HTML page.</summary>
        </member>
        <member name="F:RuriLib.ResponseType.File">
            <summary>A file response, e.g. an image.</summary>
        </member>
        <member name="F:RuriLib.ResponseType.Base64String">
            <summary>A byte array response encoded as a base64 string.</summary>
        </member>
        <member name="T:RuriLib.BlockRequest">
            <summary>
            A block that can perform HTTP requests.
            </summary>
        </member>
        <member name="P:RuriLib.BlockRequest.Url">
            <summary>The URL to call, including additional GET query parameters.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.RequestType">
            <summary>The request type.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.AuthUser">
            <summary>The username for basic auth requests.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.AuthPass">
            <summary>The password for basic auth requests.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.PostData">
            <summary>The content of the request, sent after the headers. Use '\n' to input a linebreak.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.RawData">
            <summary>The content of the request as a raw HEX string that will be sent as a bytestream.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.Method">
            <summary>The method of the HTTP request.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.SecurityProtocol">
            <summary>The security protocol(s) to use for the HTTPS request.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.CustomHeaders">
            <summary>The custom headers that are sent in the HTTP request.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.CustomCookies">
            <summary>The custom cookies that are sent in the HTTP request.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.ContentType">
            <summary>The type of content the server should expect.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.AutoRedirect">
            <summary>Whether to perform automatic redirection in the case of 3xx headers.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.ReadResponseSource">
            <summary>Whether to read the stream of data from the HTTP response. Set to false if only the headers are needed, in order to speed up the process.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.EncodeContent">
            <summary>Whether to URL encode the content before sending it.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.AcceptEncoding">
            <summary>Whether to automatically generate an Accept-Encoding header.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.MultipartBoundary">
            <summary>The boundary that separates multipart contents.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.MultipartContents">
            <summary>The list of contents to send in a multipart request.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.ResponseType">
            <summary>The type of response expected from the server.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.DownloadPath">
            <summary>The path of the file where a FILE response needs to be stored.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.OutputVariable">
            <summary>The variable name for Base64String response.</summary>
        </member>
        <member name="P:RuriLib.BlockRequest.SaveAsScreenshot">
            <summary>Whether to add the downloaded image to the default screenshot path.</summary>
        </member>
        <member name="M:RuriLib.BlockRequest.#ctor">
            <summary>
            Creates a Request block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockRequest.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockRequest.ParseString(System.String,System.Char,System.Int32)">
            <summary>
            Parses values from a string.
            </summary>
            <param name="input">The string to parse</param>
            <param name="separator">The character that separates the elements</param>
            <param name="count">The number of elements to return</param>
            <returns>The array of the parsed elements.</returns>
        </member>
        <member name="M:RuriLib.BlockRequest.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockRequest.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockRequest.GetCustomCookies">
            <summary>
            Builds a string containing custom cookies.
            </summary>
            <returns>One cookie per line, with name and value separated by a colon</returns>
        </member>
        <member name="M:RuriLib.BlockRequest.SetCustomCookies(System.String[])">
            <summary>
            Sets custom cookies from an array of lines.
            </summary>
            <param name="lines">The lines containing the colon-separated name and value of the cookies</param>
        </member>
        <member name="M:RuriLib.BlockRequest.GetCustomHeaders">
            <summary>
            Builds a string containing custom headers.
            </summary>
            <returns>One header per line, with name and value separated by a colon</returns>
        </member>
        <member name="M:RuriLib.BlockRequest.SetCustomHeaders(System.String[])">
            <summary>
            Sets custom headers from an array of lines.
            </summary>
            <param name="lines">The lines containing the colon-separated name and value of the headers</param>
        </member>
        <member name="M:RuriLib.BlockRequest.GetMultipartContents">
            <summary>
            Builds a string containing multipart content.
            </summary>
            <returns>One content per line, with type, name and value separated by a colon</returns>
        </member>
        <member name="M:RuriLib.BlockRequest.SetMultipartContents(System.String[])">
            <summary>
            Sets multipart contents from an array of lines.
            </summary>
            <param name="lines">The lines containing the colon-separated type, name and value of the multipart contents</param>
        </member>
        <member name="T:RuriLib.UtilityGroup">
            <summary>
            The available utility groups.
            </summary>
        </member>
        <member name="F:RuriLib.UtilityGroup.List">
            <summary>The group of actions performed on list variables.</summary>
        </member>
        <member name="F:RuriLib.UtilityGroup.Variable">
            <summary>The group of actions performed on single variables.</summary>
        </member>
        <member name="F:RuriLib.UtilityGroup.Conversion">
            <summary>The group of action to convert an encoded string.</summary>
        </member>
        <member name="F:RuriLib.UtilityGroup.File">
            <summary>The group of actions that interact with files.</summary>
        </member>
        <member name="F:RuriLib.UtilityGroup.Folder">
            <summary>The group of actions that interact with folders.</summary>
        </member>
        <member name="T:RuriLib.VarAction">
            <summary>
            Actions executed on single variables.
            </summary>
        </member>
        <member name="F:RuriLib.VarAction.Split">
            <summary>Splits a variable into a list given a separator.</summary>
        </member>
        <member name="T:RuriLib.ListAction">
            <summary>
            Actions executed on list variables.
            </summary>
        </member>
        <member name="F:RuriLib.ListAction.Create">
            <summary>Creates an empty list variable.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Length">
            <summary>Calculates the length of a list.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Join">
            <summary>Joins a list into a single string, separating the elements with a separator.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Sort">
            <summary>Sorts a list alphabetically, in ascending or descending order.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Concat">
            <summary>Concatenates two lists into a longer list variable.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Zip">
            <summary>Zips two lists into a new list variable where the elements are joined two by two.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Map">
            <summary>Maps two lists into a dictionary variable.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Add">
            <summary>Adds an element to a list variable.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Remove">
            <summary>Removes an element from a list variable given its index.</summary>
        </member>
        <member name="F:RuriLib.ListAction.RemoveValues">
            <summary>Removes one ore more elements from a list variable given their value.</summary>
        </member>
        <member name="F:RuriLib.ListAction.RemoveDuplicates">
            <summary>Removes duplicate elements from a list variable, keeping only the first one.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Random">
            <summary>Picks a random element from a list variable.</summary>
        </member>
        <member name="F:RuriLib.ListAction.Shuffle">
            <summary>Randomizes the order of elements in a list.</summary>
        </member>
        <member name="T:RuriLib.FileAction">
            <summary>
            Actions that can be performed on files.
            </summary>
        </member>
        <member name="F:RuriLib.FileAction.Exists">
            <summary>Checks if a file exists.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Read">
            <summary>Reads a file to a single variable.</summary>
        </member>
        <member name="F:RuriLib.FileAction.ReadLines">
            <summary>Reads a file to a list variable.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Write">
            <summary>Writes a single variable to a file.</summary>
        </member>
        <member name="F:RuriLib.FileAction.WriteLines">
            <summary>Writes a list variable to a file.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Append">
            <summary>Appends a single variable to a file.</summary>
        </member>
        <member name="F:RuriLib.FileAction.AppendLines">
            <summary>Appends a list variable to a file.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Copy">
            <summary>Copies a file to a new file.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Move">
            <summary>Moves a file to a different location.</summary>
        </member>
        <member name="F:RuriLib.FileAction.Delete">
            <summary>Deletes a file in the OB folder.</summary>
        </member>
        <member name="T:RuriLib.FolderAction">
            <summary>
            Actions that can be performed on folders.
            </summary>
        </member>
        <member name="F:RuriLib.FolderAction.Exists">
            <summary>Checks if a folder exists.</summary>
        </member>
        <member name="F:RuriLib.FolderAction.Create">
            <summary>Creates a folder.</summary>
        </member>
        <member name="F:RuriLib.FolderAction.Delete">
            <summary>Deletes a folder.</summary>
        </member>
        <member name="T:RuriLib.BlockUtility">
            <summary>
            A block that performs actions on variables, converts values and operates on files.
            </summary>
        </member>
        <member name="P:RuriLib.BlockUtility.Group">
            <summary>The utility group.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.VariableName">
            <summary>The name of the output variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.IsCapture">
            <summary>Whether the output variable should be marked for Capture.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.InputString">
            <summary>The input to process.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListAction">
            <summary>The action to be performed on a list variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListName">
            <summary>The name of the target list variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.Separator">
            <summary>The separator for joining a list.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.Ascending">
            <summary>Whether the sort should happen in ascending order.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.Numeric">
            <summary>Whether a list is made of numeric values.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.SecondListName">
            <summary>The name of the second list variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListItem">
            <summary>The list item to add.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListIndex">
            <summary>The list index where an item can be added/removed. -1 = end, 0 = start.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListElementComparer">
            <summary>The comparer to use when removing or modifying one or more elements of a list.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ListComparisonTerm">
            <summary>The string that elements in a list should be compared to.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.VarAction">
            <summary>The action to be performed on a single variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.VarName">
            <summary>The name of the single variable.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.SplitSeparator">
            <summary>The separator to split a string into a list.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ConversionFrom">
            <summary>The encoding to convert from.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.ConversionTo">
            <summary>The encoding to convert to.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.FilePath">
            <summary>The path to the file to interact with.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.FileAction">
            <summary>The action to be performed on the file.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.FolderPath">
            <summary>The path to the folder to interact with.</summary>
        </member>
        <member name="P:RuriLib.BlockUtility.FolderAction">
            <summary>The action to be performed on the folder.</summary>
        </member>
        <member name="M:RuriLib.BlockUtility.#ctor">
            <summary>
            Creates a Utility block.
            </summary>
        </member>
        <member name="M:RuriLib.BlockUtility.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockUtility.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.BlockUtility.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.IOManager">
            <summary>
            Static Class used to access serialization and deserialization of objects.
            </summary>
        </member>
        <member name="M:RuriLib.IOManager.SaveSettings``1(System.String,``0)">
            <summary>
            Saves the RuriLib settings to a file.
            </summary>
            <param name="settingsFile">The file you want to save to</param>
            <param name="settings">The RuriLib settings object</param>
        </member>
        <member name="M:RuriLib.IOManager.LoadSettings``1(System.String)">
            <summary>
            Loads the RuriLib settings from a file.
            </summary>
            <param name="settingsFile">The file you want to load from</param>
            <returns>An instance of RLSettingsViewModel</returns>
        </member>
        <member name="M:RuriLib.IOManager.SerializeBlock(RuriLib.BlockBase)">
            <summary>
            Serializes a block to a JSON string.
            </summary>
            <param name="block">The block to serialize</param>
            <returns>The JSON-encoded BlockBase object with TypeNameHandling on</returns>
        </member>
        <member name="M:RuriLib.IOManager.DeserializeBlock(System.String)">
            <summary>
            Deserializes a Block from a JSON string.
            </summary>
            <param name="block">The JSON-encoded string with TypeNameHandling on</param>
            <returns>An instance of BlockBase</returns>
        </member>
        <member name="M:RuriLib.IOManager.SerializeBlocks(System.Collections.Generic.List{RuriLib.BlockBase})">
            <summary>
            Serializes a list of blocks to a JSON string.
            </summary>
            <param name="blocks">The list of blocks to serialize</param>
            <returns>The JSON-encoded List of BlockBase objects with TypeNameHandling on</returns>
        </member>
        <member name="M:RuriLib.IOManager.DeserializeBlocks(System.String)">
            <summary>
            Deserializes a list of blocks from a JSON string.
            </summary>
            <param name="blocks">The JSON-encoded string with TypeNameHandling on</param>
            <returns>A list of instances of BlockBase</returns>
        </member>
        <member name="M:RuriLib.IOManager.SerializeConfig(RuriLib.Config)">
            <summary>
            Serializes a Config object to the loli-formatted string.
            </summary>
            <param name="config">The Config to serialize</param>
            <returns>The loli-formatted string</returns>
        </member>
        <member name="M:RuriLib.IOManager.DeserializeConfig(System.String)">
            <summary>
            Deserializes a Config object from a loli-formatted string.
            </summary>
            <param name="config">The loli-formatted string</param>
            <returns>An instance of the Config object</returns>
        </member>
        <member name="M:RuriLib.IOManager.SerializeProxies(System.Collections.Generic.List{RuriLib.Models.CProxy})">
            <summary>
            Serializes a list of proxies to a JSON string.
            </summary>
            <param name="proxies">The list of proxies to serialize</param>
            <returns>The JSON-encoded list of CProxy objects with TypeNameHandling on</returns>
        </member>
        <member name="M:RuriLib.IOManager.DeserializeProxies(System.String)">
            <summary>
            Deserializes a list of proxies from a JSON string.
            </summary>
            <param name="proxies">The JSON-encoded list of proxies with TypeNameHandling on</param>
            <returns>A list of CProxy objects</returns>
        </member>
        <member name="M:RuriLib.IOManager.LoadConfig(System.String)">
            <summary>
            Loads a Config object from a .loli file.
            </summary>
            <param name="fileName">The config file</param>
            <returns>A Config object</returns>
        </member>
        <member name="M:RuriLib.IOManager.SaveConfig(RuriLib.Config,System.String)">
            <summary>
            Saves a Config object to a .loli file.
            </summary>
            <param name="config">The viewmodel of the config to save</param>
            <param name="fileName">The path of the file where the Config will be saved</param>
            <returns>Whether the file has been saved successfully</returns>
        </member>
        <member name="M:RuriLib.IOManager.CloneConfig(RuriLib.Config)">
            <summary>
            Clones a Config object by serializing and deserializing it.
            </summary>
            <param name="config">The object to clone</param>
            <returns>The cloned Config object</returns>
        </member>
        <member name="M:RuriLib.IOManager.CloneBlock(RuriLib.BlockBase)">
            <summary>
            Clones a BlockBase object by serializing and deserializing it.
            </summary>
            <param name="block">The object to clone</param>
            <returns>The cloned BlockBase object</returns>
        </member>
        <member name="M:RuriLib.IOManager.CloneProxies(System.Collections.Generic.List{RuriLib.Models.CProxy})">
            <summary>
            Clones a list of proxies by serializing and deserializing it.
            </summary>
            <param name="proxies">The list of proxies to clone</param>
            <returns>The cloned list of proxies</returns>
        </member>
        <member name="M:RuriLib.IOManager.ParseEnvironmentSettings(System.String)">
            <summary>
            Parses the EnvironmentSettings from a file.
            </summary>
            <param name="envFile">The .ini file of the settings</param>
            <returns>The loaded EnvironmentSettings object</returns>
        </member>
        <member name="T:RuriLib.Config">
            <summary>
            Represents a configuration in RuriLib.
            </summary>
        </member>
        <member name="M:RuriLib.Config.#ctor(RuriLib.ConfigSettings,System.String)">
            <summary>
            Creates a Config given the settings and the script.
            </summary>
            <param name="settings">The settings of the Config</param>
            <param name="script">The LoliScript script of the Config</param>
        </member>
        <member name="P:RuriLib.Config.Settings">
            <summary>The settings of the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.Script">
            <summary>The LoliScript script of the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.SeleniumPresent">
            <summary>Whether Selenium is being used in any of the blocks of the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.DangerousScriptPresent">
            <summary>Whether a possibly dangerous JavaScript or IronPython script is present in the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.CaptchasNeeded">
            <summary>Whether captcha solving blocks are present in the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.HasCFBypass">
            <summary>Whether bypasscf blocks are present in the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.BlocksAmount">
            <summary>The amount of blocks of the Config.</summary>
        </member>
        <member name="P:RuriLib.Config.AllowedWordlists">
            <summary>The joined representation of the allowed WordlistTypes.</summary>
        </member>
        <member name="P:RuriLib.Config.LastModifiedString">
            <summary>The pretty representation of the time when the Config was last modified.</summary>
        </member>
        <member name="T:RuriLib.ConfigSettings">
            <summary>
            Contains all the settings of a Config.
            </summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.Name">
            <summary>The name of the Config.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.SuggestedBots">
            <summary>The suggested amount of Bots that should be used with the config.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.MaxCPM">
            <summary>The maximum CPM around which the Master Worker will stop starting bots and wait for the CPM to decrease below the threshold.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.LastModified">
            <summary>When the Config was last modified.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.AdditionalInfo">
            <summary>Additional information on the Config usage.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.RequiredPlugins">
            <summary>The plugins that are necessary in order for this config to run.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.RequiredPluginsString">
            <summary>The required plugins list as a comma separated string.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.Author">
            <summary>The name of the Author of the Config.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.Version">
            <summary>The version of RuriLib the Config was made with.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.SaveEmptyCaptures">
            <summary>Whether to remove the empty captures before saving the hits to the database.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.ContinueOnCustom">
            <summary>Whether to continue execution after a Custom status has been reached.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.SaveHitsToTextFile">
            <summary>Whether to save hits to a text file instead of the database.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.IgnoreResponseErrors">
            <summary>Whether to proceed if an HTTP request fails instead of giving the ERROR status.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.MaxRedirects">
            <summary>The maximum amount of times we can be redirected to different URLs for a single request.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.NeedsProxies">
            <summary>Whether the Config needs proxies to work (the Runner can override this).</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.OnlySocks">
            <summary>Whether only SOCKS proxies should be used.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.OnlySsl">
            <summary>Whether only SSL proxies should be used.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.MaxProxyUses">
            <summary>The maximum amount of times a proxy can be used before being banned by the Runner (0 for infinite).</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.BanProxyAfterGoodStatus">
            <summary>Whether to ban the proxy after a SUCCESS, CUSTOM or NONE status (not FAIL or RETRY).</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.BanLoopEvasionOverride">
            <summary>
            The maximum amount of times a data line ends up with a BAN status before it's marked as ToCheck.
            Overrides the global setting unless set to -1.
            </summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.EncodeData">
            <summary>Whether the data should be URLencoded after being sliced.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.AllowedWordlist1">
            <summary>The name of the first allowed WordlistType.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.AllowedWordlist2">
            <summary>The name of the second allowed WordlistType.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.DataRules">
            <summary>The collection of data rules that check if a data line is valid.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.CustomInputs">
            <summary>The collection of custom inputs that the Runner asks to the user upon start.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.ForceHeadless">
            <summary>Whether to override the default choice of the user and force headless mode.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.AlwaysOpen">
            <summary>Whether to always open a browser at the start of the checking process (if not already open).</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.AlwaysQuit">
            <summary>Whether to always quit the browser and dispose of the WebDriver at the end of the checking process (if any browser is open).</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.QuitOnBanRetry">
            <summary>Whether to quit the browser and dispose of the WebDriver at the end of the checking process (if any browser is open) on a BAN or RETRY status.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.DisableNotifications">
            <summary>Whether to disable notifications the lock the page and make it impossible to proceed.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.CustomUserAgent">
            <summary>The custom User-Agent header that should be used for every request of the browser.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.RandomUA">
            <summary>Whether to choose a random User-Agent header when opening a browser instance.</summary>
        </member>
        <member name="P:RuriLib.ConfigSettings.CustomCMDArgs">
            <summary>The custom command line arguments that are sent when running the executable file.</summary>
        </member>
        <member name="M:RuriLib.ConfigSettings.RemoveDataRuleById(System.Int32)">
            <summary>
            Removes a DataRule given its id.
            </summary>
            <param name="id">The unique id of the DataRule</param>
        </member>
        <member name="M:RuriLib.ConfigSettings.GetDataRuleById(System.Int32)">
            <summary>
            Gets a DataRule given its id.
            </summary>
            <param name="id">The unique id of the DataRule</param>
            <returns>The DataRule</returns>
        </member>
        <member name="M:RuriLib.ConfigSettings.RemoveCustomInputById(System.Int32)">
            <summary>
            Removes a CustomInput given its id.
            </summary>
            <param name="id">The unique id of the CustomInput</param>
        </member>
        <member name="M:RuriLib.ConfigSettings.GetCustomInputById(System.Int32)">
            <summary>
            Gets a CustomInput given its id.
            </summary>
            <param name="id">The unique id of the CustomInput</param>
            <returns>The CustomInput</returns>
        </member>
        <member name="T:RuriLib.Utils.Parsing.Parse">
            <summary>
            Provides parsing methods.
            </summary>
        </member>
        <member name="M:RuriLib.Utils.Parsing.Parse.LR(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Parses one or more strings from another string based on the left and right delimiters.
            </summary>
            <param name="input">The string to parse from</param>
            <param name="left">The left string delimiter</param>
            <param name="right">The right string delimiter</param>
            <param name="recursive">Whether to find all the occurrences</param>
            <param name="useRegex">Whether to automatically build a Regex pattern and use Regex matching</param>
            <returns>The parsed strings.</returns>
        </member>
        <member name="M:RuriLib.Utils.Parsing.Parse.CSS(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Parses an attribute's value from one or more elements of an HTML page.
            </summary>
            <param name="input">The HTML page</param>
            <param name="selector">The CSS Selector that targets the desired elements</param>
            <param name="attribute">The attribute for which you want to parse the value</param>
            <param name="index">The index of the element to parse among all the ones selected (if not recursive)</param>
            <param name="recursive">Whether to parse from all the elements that match the selector</param>
            <returns>The attribute value(s).</returns>
        </member>
        <member name="M:RuriLib.Utils.Parsing.Parse.JSON(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Parses a JSON object or array.
            </summary>
            <param name="input">The serialized JSON object or array</param>
            <param name="field">The field for which you want to parse the value</param>
            <param name="recursive">Whether to return all the fields matching the name or JToken</param>
            <param name="useJToken">Whether to match via JToken</param>
            <returns>The value(s) of the parsed field(s).</returns>
        </member>
        <member name="M:RuriLib.Utils.Parsing.Parse.REGEX(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Text.RegularExpressions.RegexOptions})">
            <summary>
            Parses a string via a Regex pattern containing Groups, then returns them according to an output format.
            </summary>
            <param name="input">The string to parse</param>
            <param name="pattern">The Regex pattern containing groups</param>
            <param name="output">The output format string, for which [0] will be replaced with the full match, [1] with the first group etc.</param>
            <param name="recursive">Whether to make multiple matches</param>
            <param name="options">The Regex Options to use</param>
            <returns>The parsed string(s).</returns>
        </member>
        <member name="T:RuriLib.ViewModels.ConfigViewModel">
            <summary>
            An observable wrapper around a Config object.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.ConfigViewModel.Config">
            <summary>The actual Config object.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ConfigViewModel.Category">
            <summary>The Category of the config.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ConfigViewModel.FileName">
            <summary>The name of the file containing the config, without the extension.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ConfigViewModel.Remote">
            <summary>Whether the config was pulled from a remote source.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ConfigViewModel.Name">
            <summary>The name of the config.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.ConfigViewModel.#ctor(System.String,System.String,RuriLib.Config,System.Boolean)">
            <summary>
            Constructs an instance of the ConfigViewModel class.
            </summary>
            <param name="fileName">The name of the file containing the config, without the extension</param>
            <param name="category">The category of the config</param>
            <param name="config">The actual Config object</param>
            <param name="remote">Whether the Config was pulled from a remote source</param>
        </member>
        <member name="T:RuriLib.ViewModels.CustomInput">
            <summary>
            A custom input that is required to the user before the Config is started.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.CustomInput.Description">
            <summary>The description of what the user needs to enter.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.CustomInput.VariableName">
            <summary>The name of the variable to create basing on the value provided by the user.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.CustomInput.Id">
            <summary>The id of the Custom Input.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.CustomInput.#ctor(System.Int32)">
            <summary>
            Creates a CustomInput given an id.
            </summary>
            <param name="id">A unique id</param>
        </member>
        <member name="T:RuriLib.ViewModels.ProxyManagerSettings">
            <summary>
            Provides settings for the proxy manager.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.ProxyManagerSettings.ProxySiteUrls">
            <summary>The list of the urls for sites to test the proxies on.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ProxyManagerSettings.ProxyKeys">
            <summary>The list of the keys for sites to test the proxies on.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ProxyManagerSettings.ActiveProxySiteUrl">
            <summary>The selected dropdown item in the proxy site urls dropdown</summary>
        </member>
        <member name="P:RuriLib.ViewModels.ProxyManagerSettings.ActiveProxyKey">
            <summary>The selected dropdown item in the proxy keys dropdown</summary>
        </member>
        <member name="T:RuriLib.ViewModels.SettingsCaptchas">
            <summary>
            Provides captcha-related settings.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CurrentService">
            <summary>Which Captcha Service is currently selected for solving captcha challenges.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.AntiCapToken">
            <summary>The AntiCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.ImageTypToken">
            <summary>The ImageTyperz API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.DBCUser">
            <summary>The DeathByCaptcha Username.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.DBCPass">
            <summary>The DeathByCaptcha Password.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.TwoCapToken">
            <summary>The TwoCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.RuCapToken">
            <summary>The RuCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.DCUser">
            <summary>The DeCaptcher Username.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.DCPass">
            <summary>The DeCaptcher Password.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.AZCapToken">
            <summary>The AZCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.SCToken">
            <summary>The SolveCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.SRUserId">
            <summary>The SolveReCaptcha User Id.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.SRToken">
            <summary>The SolveReCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.TrueCapUser">
            <summary>The TrueCaptcha username.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.TrueCapToken">
            <summary>The TrueCaptcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CIOToken">
            <summary>The CaptchasIO API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CDToken">
            <summary>The CaptchaDecoder API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CustomTwoCapToken">
            <summary>The custom 2Captcha API Token.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CustomTwoCapDomain">
            <summary>The custom 2Captcha server's domain.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.CustomTwoCapPort">
            <summary>The custom 2Captcha server's port.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.BypassBalanceCheck">
            <summary>Whether to bypass the balance check before solving a captcha challenge.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsCaptchas.Timeout">
            <summary>The maximum amount of time to wait until a captcha challenge is solved.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsCaptchas.Reset">
            <summary>
            Resets the properties to their default value.
            </summary>
        </member>
        <member name="T:RuriLib.ViewModels.BotsDisplayMode">
            <summary>
            The level of detail of a bot's status.
            </summary>
        </member>
        <member name="F:RuriLib.ViewModels.BotsDisplayMode.None">
            <summary>No information is displayed.</summary>
        </member>
        <member name="F:RuriLib.ViewModels.BotsDisplayMode.Everything">
            <summary>Every information is displayed.</summary>
        </member>
        <member name="F:RuriLib.ViewModels.BotsDisplayMode.EndResultOnly">
            <summary>Only information about the end result is displayed.</summary>
        </member>
        <member name="T:RuriLib.ViewModels.SettingsGeneral">
            <summary>
            Provides settings for general purposes.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.WaitTime">
            <summary>The amount of time the Bot needs to wait after completing a check, in milliseconds.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.RequestTimeout">
            <summary>The maximum amount of time to wait for a response from the server for any HTTP request, in seconds.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.MaxHits">
            <summary>The maximum number of hits before the Runner automatically stops (0 for infinite).</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.BotsDisplayMode">
            <summary>The rate and detail of information to display in the Bot Status column.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.EnableBotLog">
            <summary>Whether to keep the LogBuffer from BotData stored for future use (slows down the Runner).</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.SaveLastSource">
            <summary>Whether to store the last Response Source after a successful check.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.SendToCheckOnAbort">
            <summary>Whether to save as ToCheck all the data lines that were being processed when the master worker was aborted.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.WebhookEnabled">
            <summary>Whether to activate the hit webhook that gets called upon a SUCCESS or a custom result.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.WebhookURL">
            <summary>The URL where the JSON-encoded hit gets sent.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsGeneral.WebhookUser">
            <summary>The username of the user that is calling the webhook, as it will be received by the remote API.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsGeneral.Reset">
            <summary>
            Resets the properties to their default value.
            </summary>
        </member>
        <member name="T:RuriLib.ViewModels.ProxyReloadSource">
            <summary>
            The Source of proxies that gets queried when all proxies are banned in order to get fresh ones.
            </summary>
        </member>
        <member name="F:RuriLib.ViewModels.ProxyReloadSource.Manager">
            <summary>The ProxyManager.</summary>
        </member>
        <member name="F:RuriLib.ViewModels.ProxyReloadSource.File">
            <summary>A file on the disk.</summary>
        </member>
        <member name="F:RuriLib.ViewModels.ProxyReloadSource.Remote">
            <summary>A remote API or website.</summary>
        </member>
        <member name="T:RuriLib.ViewModels.SettingsProxies">
            <summary>
            Provides proxy-related settings.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ConcurrentUse">
            <summary>Whether to allow two Bots to use the same proxy.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.NeverBan">
            <summary>Whether to never ban the proxies.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.BanLoopEvasion">
            <summary>The maximum amount of times a data line ends up with a BAN status before it's marked as ToCheck.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ShuffleOnStart">
            <summary>Whether proxy lists should be shuffled before being assigned to the Runner.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.Reload">
            <summary>Whether to reload the proxies from the proxy source after they are all banned.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ReloadSource">
            <summary>The source to reload the proxies from.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ReloadPath">
            <summary>The file path on disk.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ReloadType">
            <summary>The Type of the proxies to load.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.ReloadInterval">
            <summary>The amount of time between reloads in minutes (0 to only reload when all proxies are banned).</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.AlwaysGetClearance">
            <summary>Whether to avoid storing the clearance cookie for future use when querying the site from the same IP (proxy).</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.GlobalBanKeys">
            <summary>
            <para>The array of possible bad replies from a proxy server.</para>
            <para>The proxy will be banned when one of the keys is found.</para>
            <para>These are useful to immediately blacklist proxies that need a captive portal or that only accept IPs from a given region.</para>
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.GlobalRetryKeys">
            <summary>
            <para>The array of possible temporary bad replies from a proxy server.</para>
            <para>The proxy will be retried on the next check.</para>
            <para>These are useful when the proxy is temporarily too busy because of high traffic.</para>
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsProxies.RemoteProxySources">
            <summary>The sources where proxies are downloaded and parsed from.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsProxies.RemoveRemoteProxySourceById(System.Int32)">
            <summary>
            Removes a RemoteProxySource given its id.
            </summary>
            <param name="id">The id of the RemoteProxySource</param>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsProxies.GetRemoteProxySourceById(System.Int32)">
            <summary>
            Gets a RemoteProxySource given its id.
            </summary>
            <param name="id">The id of the RemoteProxySource</param>
            <returns>The wanted RemoteProxySource. Null if not found.</returns>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsProxies.Reset">
            <summary>
            Resets the properties to their default value.
            </summary>
        </member>
        <member name="T:RuriLib.ViewModels.BrowserType">
            <summary>
            The Type of supported Browser to drive via selenium.
            </summary>
        </member>
        <member name="F:RuriLib.ViewModels.BrowserType.Chrome">
            <summary>Google Chrome</summary>
        </member>
        <member name="F:RuriLib.ViewModels.BrowserType.Firefox">
            <summary>Mozilla Firefox</summary>
        </member>
        <member name="T:RuriLib.ViewModels.SettingsSelenium">
            <summary>
            Provides selenium-related settings.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.Browser">
            <summary>The Browser to be used.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.Headless">
            <summary>Whether to run the browser in Headless mode (--headless argument).</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.FirefoxBinaryLocation">
            <summary>The location of the firefox.exe binary on disk.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.ChromeBinaryLocation">
            <summary>The location of the chrome.exe binary on disk.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.ChromeExtensions">
            <summary>The list of .crx extensions for Chrome inside the ChromeExtensions folder. Extensions don't work in Headless mode!</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.DrawMouseMovement">
            <summary>Whether to draw red dots to follow the mouse movement when a MOUSEACTION command is issued.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.SettingsSelenium.PageLoadTimeout">
            <summary>The default timeout for page load in the browser.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.SettingsSelenium.Reset">
            <summary>
            Resets the properties to their default value.
            </summary>
        </member>
        <member name="T:RuriLib.ViewModels.RLSettingsViewModel">
            <summary>
            The settings used across RuriLib classes. Contains the smaller settings categories.
            </summary>
        </member>
        <member name="P:RuriLib.ViewModels.RLSettingsViewModel.General">
            <summary>The General Settings of RuriLib.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.RLSettingsViewModel.Proxies">
            <summary>The Proxy Settings of RuriLib.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.RLSettingsViewModel.Captchas">
            <summary>The Captcha Settings of RuriLib.</summary>
        </member>
        <member name="P:RuriLib.ViewModels.RLSettingsViewModel.Selenium">
            <summary>The Selenium Settings of RuriLib.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.RLSettingsViewModel.Reset">
            <summary>
            Resets the properties to their default value.
            </summary>
        </member>
        <member name="T:RuriLib.ViewModels.ViewModelBase">
            <summary>
            A basic viewmodel that implements the PropertyChanged event.
            </summary>
        </member>
        <member name="E:RuriLib.ViewModels.ViewModelBase.PropertyChanged">
            <summary>The event that lets the GUI know a property was changed.</summary>
        </member>
        <member name="M:RuriLib.ViewModels.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property. If null, the name of the calling property will be used.</param>
        </member>
        <member name="T:RuriLib.LogLevel">
            <summary>
            How critical a log entry is.
            </summary>
        </member>
        <member name="F:RuriLib.LogLevel.Info">
            <summary>An informational message.</summary>
        </member>
        <member name="F:RuriLib.LogLevel.Warning">
            <summary>A warning message.</summary>
        </member>
        <member name="F:RuriLib.LogLevel.Error">
            <summary>An error message.</summary>
        </member>
        <member name="T:RuriLib.LogEntry">
            <summary>
            A single entry in the log of the application.
            </summary>
        </member>
        <member name="P:RuriLib.LogEntry.LogString">
            <summary>The logged message.</summary>
        </member>
        <member name="P:RuriLib.LogEntry.LogColor">
            <summary>The color of the logged entry.</summary>
        </member>
        <member name="P:RuriLib.LogEntry.LogTime">
            <summary>The timestamp of the logged entry.</summary>
        </member>
        <member name="P:RuriLib.LogEntry.LogLevel">
            <summary>The level of the logged entry.</summary>
        </member>
        <member name="P:RuriLib.LogEntry.LogComponent">
            <summary>The component that logged the entry.</summary>
        </member>
        <member name="M:RuriLib.LogEntry.#ctor(System.String,System.Windows.Media.Color)">
            <summary>
            <para>Creates a Log Entry given a message and a color.</para>
            <para>This constructor is used to generate entries for the Bot Log.</para>
            <para>The level is Info and the component is an empty string.</para>
            </summary>
            <param name="logString">The message to log</param>
            <param name="logColor">The color of the message</param>
        </member>
        <member name="M:RuriLib.LogEntry.#ctor(System.String,System.String,RuriLib.LogLevel)">
            <summary>
            <para>Creates a Log Entry given a component, a message and a level.</para>
            <para>This constructor is used for logging messages coming from components of the View.</para>
            </summary>
            <param name="logComponent">The Component that is logging the entry</param>
            <param name="logString">The message to log</param>
            <param name="logLevel">The level of the log</param>
        </member>
        <member name="T:RuriLib.BotStatus">
            <summary>
            The status of the Bot. While the status is NONE or SUCCESS the Bot keeps checking the script until the end, otherwise it stops.
            </summary>
        </member>
        <member name="F:RuriLib.BotStatus.NONE">
            <summary>The initial status of the bot. If a bot ends its execution with this stauts, the data line will be registered as ToCheck.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.ERROR">
            <summary>Something wrong happened while processing a block.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.SUCCESS">
            <summary>The data line will be registered as a Hit.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.FAIL">
            <summary>The data line will be registered as a fail.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.BAN">
            <summary>The data line will be retried and the proxy will be banned.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.RETRY">
            <summary>The data line will be retried.</summary>
        </member>
        <member name="F:RuriLib.BotStatus.CUSTOM">
            <summary>The data line will be registered as a Custom.</summary>
        </member>
        <member name="T:RuriLib.BotData">
            <summary>
            Class that holds all the variables needed for checking a single data line.
            </summary>
        </member>
        <member name="F:RuriLib.BotData.random">
            <summary>A random number generator.</summary>
        </member>
        <member name="P:RuriLib.BotData.Status">
            <summary>The Status of the Bot.</summary>
        </member>
        <member name="F:RuriLib.BotData.CustomStatus">
            <summary>The Custom Status name in case the Status was set to Custom.</summary>
        </member>
        <member name="P:RuriLib.BotData.StatusString">
            <summary>The Status of the Bot as a string.</summary>
        </member>
        <member name="P:RuriLib.BotData.BotNumber">
            <summary>The id of the current Bot.</summary>
        </member>
        <member name="P:RuriLib.BotData.Driver">
            <summary>The selenium webdriver currently being used.</summary>
        </member>
        <member name="P:RuriLib.BotData.BrowserOpen">
            <summary>Whether the browser is open or not.</summary>
        </member>
        <member name="P:RuriLib.BotData.CustomObjects">
            <summary>A dictionary of object that can be used for keeping session-based objects through different blocks.</summary>
        </member>
        <member name="P:RuriLib.BotData.Data">
            <summary>The wrapped data line that needs to be checked.</summary>
        </member>
        <member name="P:RuriLib.BotData.Proxy">
            <summary>The proxy currently being used (null if none).</summary>
        </member>
        <member name="P:RuriLib.BotData.UseProxies">
            <summary>Whether we should use proxies or not.</summary>
        </member>
        <member name="P:RuriLib.BotData.GlobalSettings">
            <summary>The Global RuriLib settings valid for any Config.</summary>
        </member>
        <member name="P:RuriLib.BotData.ConfigSettings">
            <summary>The settings for the current Config.</summary>
        </member>
        <member name="P:RuriLib.BotData.Balance">
            <summary>The remaining balance on the captcha service account.</summary>
        </member>
        <member name="P:RuriLib.BotData.Screenshots">
            <summary>The paths of the Screenshots saved by selenium.</summary>
        </member>
        <member name="P:RuriLib.BotData.Address">
            <summary>The return Address of the HttpResponse.</summary>
        </member>
        <member name="P:RuriLib.BotData.ResponseCode">
            <summary>The HTTP code of the HttpResponse.</summary>
        </member>
        <member name="P:RuriLib.BotData.ResponseHeaders">
            <summary>The dictionary of headers of the HttpResponse.</summary>
        </member>
        <member name="P:RuriLib.BotData.Cookies">
            <summary>The dictionary of cookies of the HttpResponse.</summary>
        </member>
        <member name="P:RuriLib.BotData.ResponseSource">
            <summary>The source of the HttpResponse.</summary>
        </member>
        <member name="P:RuriLib.BotData.Variables">
            <summary>The local variables of the Bot.</summary>
        </member>
        <member name="P:RuriLib.BotData.GlobalVariables">
            <summary>The global variables shared between all the Bots. They can be accessed or set by any bot.</summary>
        </member>
        <member name="P:RuriLib.BotData.GlobalCookies">
            <summary>The global cookies shared between all the Bots. They are set in the local cookie jar at the start of the check.</summary>
        </member>
        <member name="P:RuriLib.BotData.LogBuffer">
            <summary>The detailed log of the last block that was run.</summary>
        </member>
        <member name="P:RuriLib.BotData.IsDebug">
            <summary>Whether this object is being used for a Debugger or for the Runner.</summary>
        </member>
        <member name="M:RuriLib.BotData.#ctor(RuriLib.ViewModels.RLSettingsViewModel,RuriLib.ConfigSettings,RuriLib.Models.CData,RuriLib.Models.CProxy,System.Boolean,System.Random,System.Int32,System.Boolean)">
            <summary>
            Creates a BotData object given some parameters.
            </summary>
            <param name="globalSettings">The global RuriLib settings</param>
            <param name="configSettings">The settings for the current Config</param>
            <param name="data">The wrapped data line to check</param>
            <param name="proxy">The proxy to use (set to null if none)</param>
            <param name="useProxies">Whether to use the proxy for requests</param>
            <param name="random">A reference to the global random generator</param>
            <param name="botNumber">The number of the bot that is creating this object</param>
            <param name="isDebug">Whether this object is created from a Debugger or from a Runner</param>
        </member>
        <member name="M:RuriLib.BotData.Log(RuriLib.LogEntry)">
            <summary>
            Adds a new LogEntry to the LogBuffer.
            </summary>
            <param name="entry">The LogEntry to add</param>
        </member>
        <member name="M:RuriLib.BotData.Log(System.String)">
            <summary>
            Adds a new message to the LogBuffer with white text.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="M:RuriLib.BotData.LogRange(System.Collections.Generic.List{RuriLib.LogEntry})">
            <summary>
            Adds multiple new LogEntry objects to the LogBuffer.
            </summary>
            <param name="list">The list of log entries to add</param>
        </member>
        <member name="M:RuriLib.BotData.LogNewLine">
            <summary>
            Logs an empty line to the LogBuffer.
            </summary>
        </member>
        <member name="M:RuriLib.BotData.GetCustomObject(System.String)">
            <summary>
            Retrieves a custom object from the 
            </summary>
            <param name="key">The key of the object in the dictionary</param>
            <returns>The object or null if the key was not found</returns>
        </member>
        <member name="T:RuriLib.BrowserAction">
            <summary>
            The actions that can be performed on a browser.
            </summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Open">
            <summary>Starts the driver and opens the browser.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Close">
            <summary>Closes the browser but not the driver.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Quit">
            <summary>Closes the browser and disposes the driver.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.ClearCookies">
            <summary>Clears the cookies in the browser.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SendKeys">
            <summary>Sends some keystrokes to the browser. Special keys like &lt;ENTER&gt; can be sent, separated by two pipe characters e.g. &lt;TAB&gt;||&lt;ENTER&gt;</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Screenshot">
            <summary>Takes a screenshot of the visible part of the page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.ScrollToTop">
            <summary>Scrolls to the top of the page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.ScrollToBottom">
            <summary>Scrolls to the bottom of the page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Scroll">
            <summary>Scrolls down by a given number of pixels from the top of the page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.OpenNewTab">
            <summary>Opens a new tab.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.CloseCurrentTab">
            <summary>Closes the current tab.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SwitchToTab">
            <summary>Switches to the browser tab with a given index.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Refresh">
            <summary>Refreshes the current page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Back">
            <summary>Goes to the previous page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Forward">
            <summary>Goes to the next page.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Maximize">
            <summary>Maximizes the browser window.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.Minimize">
            <summary>Minimizes the browser window.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.FullScreen">
            <summary>Sets the browser window as full screen.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SetWidth">
            <summary>Sets the browser window's width.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SetHeight">
            <summary>Sets the browser window's height.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.DOMtoSOURCE">
            <summary>Sets the DOM (the page source modified by the javascript code) into the SOURCE variable.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.GetCookies">
            <summary>Transfers the cookies from the browser to the HTTP cookie jar.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SetCookies">
            <summary>Transfers the cookies from the HTTP cookie jar to the browser.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SwitchToDefault">
            <summary>Switches to the default content.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SwitchToAlert">
            <summary>Switches to the alert message.</summary>
        </member>
        <member name="F:RuriLib.BrowserAction.SwitchToParentFrame">
            <summary>Switches to the default frame (useful to get out of an iframe).</summary>
        </member>
        <member name="T:RuriLib.SBlockBrowserAction">
            <summary>
            A block that can interact with a selenium-driven browser.
            </summary>
        </member>
        <member name="P:RuriLib.SBlockBrowserAction.Action">
            <summary>The action that is performed on the browser.</summary>
        </member>
        <member name="P:RuriLib.SBlockBrowserAction.Input">
            <summary>The input string.</summary>
        </member>
        <member name="M:RuriLib.SBlockBrowserAction.#ctor">
            <summary>
            Creates a BrowserAction block.
            </summary>
        </member>
        <member name="M:RuriLib.SBlockBrowserAction.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockBrowserAction.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockBrowserAction.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockBrowserAction.OpenBrowser(RuriLib.BotData)">
            <summary>
            Opens a browser of the given type (if not already open) and with the given settings.
            </summary>
            <param name="data">The BotData where the settings are stored.</param>
        </member>
        <member name="T:RuriLib.ElementLocator">
            <summary>
            The available ways to address an element.
            </summary>
        </member>
        <member name="F:RuriLib.ElementLocator.Id">
            <summary>The id of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementLocator.Class">
            <summary>The class of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementLocator.Name">
            <summary>The name of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementLocator.Tag">
            <summary>The tag of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementLocator.Selector">
            <summary>The CSS selector of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementLocator.XPath">
            <summary>The xpath of the element.</summary>
        </member>
        <member name="T:RuriLib.ElementAction">
            <summary>
            The actions that can be performed on an element.
            </summary>
        </member>
        <member name="F:RuriLib.ElementAction.Clear">
            <summary>Clears the text of an input element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SendKeys">
            <summary>Sends keystrokes to an input element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SendKeysHuman">
            <summary>Types keystrokes into an input element with random delays between each keystroke, like a human would.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.Click">
            <summary>Clicks an element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.Submit">
            <summary>Submits a form element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SelectOptionByText">
            <summary>Selects an option from a select element by visible text.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SelectOptionByIndex">
            <summary>Selects an option from a select element by index.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SelectOptionByValue">
            <summary>Selects an option from a select element by value.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.GetText">
            <summary>Gets the text inside an element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.GetAttribute">
            <summary>Gets a given attribute of an element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.IsDisplayed">
            <summary>Checks if the element is currently displayed on the page.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.IsEnabled">
            <summary>Checks if the element is enabled on the page.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.IsSelected">
            <summary>Checks if the element is selected.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.LocationX">
            <summary>Retrieves the X coordinate of the top-left corner of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.LocationY">
            <summary>Retrieves the Y coordinate of the top-left corner of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SizeX">
            <summary>Retrieves the width of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SizeY">
            <summary>Retrieves the height of the element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.Screenshot">
            <summary>Takes a screenshot of the element and saves it as an image.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.ScreenshotBase64">
            <summary>Takes a screenshot of the element and saves it as a base64-encoded string.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.SwitchToFrame">
            <summary>Switches to the iframe element.</summary>
        </member>
        <member name="F:RuriLib.ElementAction.WaitForElement">
            <summary>Waits until the element appears in the DOM (up to a specified timeout).</summary>
        </member>
        <member name="T:RuriLib.SBlockElementAction">
            <summary>
            A block that can perform an action on an element inside an HTML page.
            </summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.Locator">
            <summary>The element locator.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.ElementString">
            <summary>The value of the locator.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.ElementIndex">
            <summary>The index of the element in case the locator matches more than one.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.Action">
            <summary>The action to be performed on the element.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.Input">
            <summary>The input data.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.OutputVariable">
            <summary>The name of the output variable.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.IsCapture">
            <summary>Whether the output variable should be marked for Capture.</summary>
        </member>
        <member name="P:RuriLib.SBlockElementAction.Recursive">
            <summary>Whether the GetText and GetAttribute actions should be executed on all the elements matched by the locator and return a list of values.</summary>
        </member>
        <member name="M:RuriLib.SBlockElementAction.#ctor">
            <summary>
            Creates an element action block.
            </summary>
        </member>
        <member name="M:RuriLib.SBlockElementAction.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockElementAction.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockElementAction.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockElementAction.GetElementScreenShot(OpenQA.Selenium.IWebDriver,OpenQA.Selenium.IWebElement)">
            <summary>
            Screenshots an element on the page.
            </summary>
            <param name="driver">The selenium driver</param>
            <param name="element">The element to screenshot</param>
            <returns>The bitmap screenshot of the element</returns>
        </member>
        <member name="T:RuriLib.SBlockExecuteJS">
            <summary>
            A block that executes javascript code in the selenium-driven browser.
            </summary>
        </member>
        <member name="P:RuriLib.SBlockExecuteJS.JavascriptCode">
            <summary>The javascript code.</summary>
        </member>
        <member name="P:RuriLib.SBlockExecuteJS.OutputVariable">
            <summary>The name of the output variable.</summary>
        </member>
        <member name="P:RuriLib.SBlockExecuteJS.IsCapture">
            <summary>Whether the output variable should be marked for Capture.</summary>
        </member>
        <member name="M:RuriLib.SBlockExecuteJS.#ctor">
            <summary>
            Creates an ExecuteJS block.
            </summary>
        </member>
        <member name="M:RuriLib.SBlockExecuteJS.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockExecuteJS.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockExecuteJS.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
        <member name="T:RuriLib.SBlockNavigate">
            <summary>
            A block that navigates to a given URL in a selenium-driven browser.
            </summary>
        </member>
        <member name="P:RuriLib.SBlockNavigate.Url">
            <summary>The destination URL.</summary>
        </member>
        <member name="P:RuriLib.SBlockNavigate.Timeout">
            <summary>The maximum time to wait for the page to load.</summary>
        </member>
        <member name="P:RuriLib.SBlockNavigate.BanOnTimeout">
            <summary>Whether to set the status to BAN after a timeout.</summary>
        </member>
        <member name="M:RuriLib.SBlockNavigate.#ctor">
            <summary>
            Creates a Navigate block.
            </summary>
        </member>
        <member name="M:RuriLib.SBlockNavigate.FromLS(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockNavigate.ToLS(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RuriLib.SBlockNavigate.Process(RuriLib.BotData)">
            <inheritdoc />
        </member>
    </members>
</doc>
